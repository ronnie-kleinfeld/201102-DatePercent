<?xml version="1.0" encoding="utf-8"?>
<Photo:PhotoBase xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
				 width="{m_iSize}" height="{m_iSize}"
				 toolTip="{m_strTooltip}"
				 xmlns:Photo="UI.Photo.*" xmlns:Label="UI.Label.*" xmlns:Button="UI.Button.*">
	<fx:Metadata>
		[Event(name=CLICKED, type="UI.Photo.PhotoEvent")]
		[Event(name=REMOVE_CLICKED, type="UI.Photo.PhotoEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import Handler.LocHandler;
			
			import Utils.AS3.Embeded;
			import Utils.AS3.Filters;
			import Handler.LocGeneratedCode;
			
			[Bindable] private var m_imgNotification:Class;
			[Bindable] private var m_iNotificationCount:int;
			
			[Bindable] private var m_bShowRemove:Boolean;
			public var m_bRemoveFadeEffect:Boolean = false;
			
			// properties
			public function set NotificationCount(value:int):void
			{
				m_iNotificationCount = value > 99 ? 99 : value;
				if (m_iNotificationCount > 0)
				{
					m_imgNotification = Embeded.s_imgNotificationMessageRed;
				}
				else
				{
					m_imgNotification = null;
					m_iNotificationCount = 0;
				}
			}
			
			// class
			public override function Dispose():void
			{
				super.Dispose();
				
				if (clickButtonRemove != null)
				{
					clickButtonRemove.Dispose();
					clickButtonRemove = null;
				}
				
				if (parallelShowRemove != null)
				{
					parallelShowRemove = null;
				}
				if (parallelShowNotification != null)
				{
					parallelShowNotification = null;
				}
			}
			
			// methods
			public function DoShowRemove():void
			{
				m_bShowRemove = true;
				this.buttonMode = false;
				parallelShowRemove.play();
				m_bRemoveFadeEffect = false;
			}
			public function DoHideRemove():void
			{
				this.buttonMode = true;
				filters = [Filters.Glow];
				parallelShowNotification.play();
				m_bShowRemove = false;
				m_bRemoveFadeEffect = true;
			}
			
			// events
			protected override function rollOverHandler(event:MouseEvent):void
			{
				super.rollOverHandler(event);
				if (m_bRemoveFadeEffect)
				{
					parallelShowRemove.play();
				}
				if (Selected)
				{
					filters = [Filters.Glow];
				}
				else
				{
					filters = [Filters.Glow];
				}
			}
			protected override function rollOutHandler(event:MouseEvent):void
			{
				super.rollOutHandler(event);
				if (m_bRemoveFadeEffect)
				{
					parallelShowRemove.stop();
					parallelShowNotification.play();
				}
				if (Selected)
				{
					filters = [Filters.Selected];
				}
				else
				{
					filters = null;
				}
			}
			protected override function mouseDownHandler(event:MouseEvent):void
			{
				super.mouseDownHandler(event);
				Selected = !Selected;
				if (Selected)
				{
					if (event.buttonDown)
					{
						filters = [Filters.Sunken];
						dispatchEvent(new PhotoEvent(PhotoEvent.CLICKED, this));
					}
					else
					{
						filters = [Filters.Selected];
					}
				}
				else
				{
					if (event.buttonDown)
					{
						filters = [Filters.Selected, Filters.Sunken];
						dispatchEvent(new PhotoEvent(PhotoEvent.CLICKED, this));
					}
					else
					{
						filters = [Filters.Glow];
					}
				}
			}
			protected override function mouseUpHandler(event:MouseEvent):void
			{
				super.mouseUpHandler(event);
				if (Selected)
				{
					filters = [Filters.Selected];
				}
				else
				{
					filters = [Filters.Glow];
				}
			}

			protected function clickButtonRemove_clickHandler(event:MouseEvent):void
			{
				if (m_bShowRemove)
				{
					event.stopPropagation();
					dispatchEvent(new PhotoEvent(PhotoEvent.REMOVE_CLICKED, this));
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:Transition>
			<s:Parallel id="parallelShowNotification" effectEnd="{m_bShowRemove=false}">
				<s:Fade target="{imageNotification}" alphaFrom="0" alphaTo="1" duration="250"/>
				<s:Fade target="{buttonLabelNotification}" alphaFrom="0" alphaTo="1" duration="250"/>
				<s:Fade target="{clickButtonRemove}" alphaFrom="1" alphaTo="0" duration="250"/>
			</s:Parallel>
		</s:Transition>
		<s:Transition>
			<s:Parallel id="parallelShowRemove" effectEnd="{m_bShowRemove=true}">
				<s:Fade target="{imageNotification}" alphaFrom="1" alphaTo="0" duration="1000"/>
				<s:Fade target="{buttonLabelNotification}" alphaFrom="1" alphaTo="0" duration="1000"/>
				<s:Fade target="{clickButtonRemove}" alphaFrom="0" alphaTo="1" duration="1000"/>
			</s:Parallel>
		</s:Transition>
	</fx:Declarations>
	<s:VGroup horizontalAlign="center" verticalAlign="middle">
		<mx:Image width="{m_iSize-4}" height="{m_iSize-4}" source="{Photo.UrlX}" scaleContent="true" verticalAlign="middle" horizontalAlign="center"/>
	</s:VGroup>
	<mx:Image id="imageNotification" top="-6" right="-3" source="{m_imgNotification}" alpha="0"/>
	<Label:ButtonLabel id="buttonLabelNotification" width="16" top="-3" right="-1" text="{m_iNotificationCount==0?'':m_iNotificationCount}" textAlign="center" alpha="0"/>
	<Button:ClickButton id="clickButtonRemove"
						toolTip="{LocHandler.GS(LocGeneratedCode.Remove)}"
						top="-3" right="-3" m_png="{Embeded.s_imgRemove}" visible="{m_bShowRemove}" alpha="0"
						click="clickButtonRemove_clickHandler(event)"/>
</Photo:PhotoBase>