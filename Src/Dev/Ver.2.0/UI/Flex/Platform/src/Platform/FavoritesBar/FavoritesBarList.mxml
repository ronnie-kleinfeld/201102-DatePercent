<?xml version="1.0" encoding="utf-8"?>
<List:HListBase xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
				width="100%" height="100%"
				initialize="initializeHandler(event)"
				xmlns:List="UI.List.*" xmlns:Button="UI.Button.*" xmlns:flexws="services.flexws.*">
	<fx:Metadata>
		[Event(name=FILL_TIMER_FILLED, type="UI.List.ListEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import Data.Base.CollectionEvent;
			import Data.Member.FavoriteData;
			import Data.Member.MapMarkerData;
			import Data.MemberData;
			
			import Handler.SesHandler;
			
			import UI.List.ListEvent;
			
			import mx.events.FlexEvent;
			
			protected override function get DoFillByTimer():Boolean
			{
				return true;
			}
			protected override function get AddItemByCollectionEvent():Boolean
			{
				return false;
			}
			
			private function initializeHandler(event:FlexEvent):void
			{
				m_scroller = scroller;
				m_hvGroup = hGroup;
				Init(SesHandler.Instance.Session.Favorites);
			}
			public override function Dispose():void
			{
				super.Dispose();
				
				if (clickButtonNext != null)
				{
					clickButtonNext.Dispose();
					clickButtonNext = null;
				}
				if (clickButtonPrev != null)
				{
					clickButtonPrev.Dispose();
					clickButtonPrev = null;
				}
			}

			protected override function DoFillTimer():void
			{
				for (var i:int = 0; i < SesHandler.Instance.Session.Favorites.Length; i++)
				{
					var favoriteData:FavoriteData = SesHandler.Instance.Session.Favorites.FindItemFavoriteDataByIndex(i);
					if (this.FindListItemByID(favoriteData.ID) == null)
					{
						var memberData:MemberData = SesHandler.Instance.Session.Members.FindItemMemberDataByID(favoriteData.ID);
						AddFavoritesListItem(memberData);
						break;
					}
				}
				
				if (m_hvGroup.numElements == SesHandler.Instance.Session.Favorites.Length)
				{
					dispatchEvent(new ListEvent(ListEvent.FILL_TIMER_FILLED, this));
				}
			}
			
			protected override function collectionBase_OBJECT_ADDED(event:CollectionEvent):void
			{
				if (AddItemByCollectionEvent)
				{
					AddFavoritesListItem(MemberData(event.ObjectData));
				}
			}
			private function AddFavoritesListItem(p_memberData:MemberData):void
			{
				SesHandler.Instance.Session.MapMarkers.AddItemMapMarkerData(new MapMarkerData(p_memberData.ID));
				
				var favoritesBarListItem:FavoritesBarListItem = new FavoritesBarListItem();
				favoritesBarListItem.Init(p_memberData);
				AddListItem(favoritesBarListItem, true);
			}
			
			protected override function collectionBase_OBJECT_REMOVED(event:CollectionEvent):void
			{
				super.collectionBase_OBJECT_REMOVED(event);
				SesHandler.Instance.Session.MapMarkers.RemoveItemMapMarkerDataByID(event.ObjectData.ID);
			}
			
			public function DoShowRemove():void
			{
				for (var i:int = 0; i < hGroup.numElements; i++)
				{
					var favoritesBarListItem:FavoritesBarListItem = FavoritesBarListItem(m_hvGroup.getElementAt(i));
					favoritesBarListItem.selectPhoto.DoShowRemove();
				}
			}
			public function DoHideRemove():void
			{
				for (var i:int = 0; i < hGroup.numElements; i++)
				{
					var favoritesBarListItem:FavoritesBarListItem = FavoritesBarListItem(m_hvGroup.getElementAt(i));
					favoritesBarListItem.selectPhoto.DoHideRemove();
				}
			}
		]]>
	</fx:Script>
	<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
		<Button:ClickButton id="clickButtonPrev" visible="{m_bPrevVisible}" m_png="{m_classPrevPng}" CLICKED="DoMovePrev()" m_strTooltip="{m_strToolTipPrev}"/>
		<s:Scroller id="scroller" width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<s:Group width="100%" height="100%">
				<s:HGroup id="hGroup" width="100%" height="100%" clipAndEnableScrolling="false" verticalAlign="middle" paddingLeft="2" paddingRight="2" gap="2"/>
			</s:Group>
		</s:Scroller>
		<Button:ClickButton id="clickButtonNext" visible="{m_bNextVisible}" m_png="{m_classNextPng}" CLICKED="DoMoveNext()" m_strTooltip="{m_strToolTipNext}"/>
	</s:HGroup>
</List:HListBase>