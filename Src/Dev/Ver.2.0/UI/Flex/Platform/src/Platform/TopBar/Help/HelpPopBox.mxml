<?xml version="1.0" encoding="utf-8"?>
<PopBox:PopBoxBase xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
				   width="160" height="198"
				   preinitialize="preinitializeHandler(event)" creationComplete="creationCompleteHandler(event)"
				   xmlns:PopBox="UI.Box.PopBox.*" xmlns:Box="UI.Box.*" xmlns:Button="UI.Button.*" xmlns:Sep="UI.Sep.*">
	<fx:Script>
		<![CDATA[
			import Handler.LocHandler;
			
			import UI.Box.BoxMDI;
			import UI.Box.PopBox.NodgePositionEnum;
			import UI.Button.ButtonBase;
			import UI.Button.ButtonEvent;
			import UI.Photo.PhotoBase;
			
			import Utils.AS3.Embeded;
			import Handler.LocGeneratedCode;
			import Utils.AS3.NavigateToWebUrl;
			
			import mx.events.FlexEvent;
			
			protected function preinitializeHandler(event:FlexEvent):void
			{
				m_enumNodgePosition = NodgePositionEnum.TOP_RIGHT;
			}
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				boxGroup.InitPadding(m_enumNodgePosition);
				boxCanvas.InidNodge(m_enumNodgePosition);
				boxBC.ShowCloseButton();
				boxBC.ShowTitle(LocHandler.GS(LocGeneratedCode.Help));
			}
			public override function Init(p_buttonOpener:ButtonBase, p_photoOpener:PhotoBase):void
			{
				super.Init(p_buttonOpener, p_photoOpener);
				DoShowBox(boxCanvas);
			}
			public override function Dispose():void
			{
				super.Dispose();
				
				if (boxBC != null)
				{
					boxBC.Dispose();
				}
				if (boxCanvas != null)
				{
					boxCanvas.Dispose();
				}
				
				if (clickButtonFeedback != null)
				{
					clickButtonFeedback.Dispose();
					clickButtonFeedback = null;
				}
				if (clickButtonReport != null)
				{
					clickButtonReport.Dispose();
					clickButtonReport = null;
				}
				if (clickButtonPrivacyPolicy != null)
				{
					clickButtonPrivacyPolicy.Dispose();
					clickButtonPrivacyPolicy = null;
				}
				if (clickButtonTermsOfUse != null)
				{
					clickButtonTermsOfUse.Dispose();
					clickButtonTermsOfUse = null;
				}
			}
			
			public function GetData():void
			{
				DoPaint();
			}
			public function DoPaint():void
			{
				DoShowContent(boxContent);
			}
			
			protected override function SetLocation():void
			{
				this.right = 13 - 26;
				this.top = 35;
			}
			
			protected function clickButtonFeedback_CLICKED(event:ButtonEvent):void
			{
				var modalBoxBase:FeedbackModalBox = new FeedbackModalBox();
				BoxMDI.GetBoxMDI.AddModalBox(modalBoxBase);
				modalBoxBase.Init(null, null);
				modalBoxBase.GetData(true);
				dispatchEvent(new Event(CLOSE));
			}
			protected function clickButtonReport_CLICKED(event:ButtonEvent):void
			{
				var modalBoxBase:FeedbackModalBox = new FeedbackModalBox();
				BoxMDI.GetBoxMDI.AddModalBox(modalBoxBase);
				modalBoxBase.Init(null, null);
				modalBoxBase.GetData(false);
				dispatchEvent(new Event(CLOSE));
			}
			protected function clickButtonPrivacyPolicy_CLICKED(event:ButtonEvent):void
			{
				Utils.AS3.NavigateToWebUrl.PrivacyPolicy();
				dispatchEvent(new Event(CLOSE));
			}
			protected function clickButtonTermsOfUse_CLICKED(event:ButtonEvent):void
			{
				Utils.AS3.NavigateToWebUrl.TermsOfUse();
				dispatchEvent(new Event(CLOSE));
			}
		]]>
	</fx:Script>
	<Box:BoxCanvas id="boxCanvas" width="100%" height="100%">
		<Box:BoxGroup id="boxGroup" width="100%" height="100%">
			<Box:BoxBC id="boxBC" width="100%" height="100%" CLOSE="dispatchEvent(new Event(CLOSE))">
				<Box:BoxContent id="boxContent" width="100%" height="100%">
					<mx:Spacer height="15"/>
					<Button:ClickButton id="clickButtonFeedback"
										m_strText="{LocHandler.GS(LocGeneratedCode.Feedback)}" m_iLabelPaddingLeft="28" m_iLabelPaddingRight="4" m_iFontSize="12"
										m_png="{Embeded.s_imgFeedback}"
										CLICKED="clickButtonFeedback_CLICKED(event)"/>
					<Sep:HSep width="140"/>
					<Button:ClickButton id="clickButtonReport"
										m_strText="{LocHandler.GS(LocGeneratedCode.Report)}" m_iLabelPaddingLeft="28" m_iLabelPaddingRight="4" m_iFontSize="12"
										m_png="{Embeded.s_imgReport}"
										CLICKED="clickButtonReport_CLICKED(event)"/>
					<Sep:HSep width="140"/>
					<Button:ClickButton id="clickButtonPrivacyPolicy"
										m_strText="{LocHandler.GS(LocGeneratedCode.Privacy_Policy)}" m_iLabelPaddingLeft="28" m_iLabelPaddingRight="4" m_iFontSize="12"
										m_png="{Embeded.s_imgPrivacyPolicy}"
										CLICKED="clickButtonPrivacyPolicy_CLICKED(event)"/>
					<Sep:HSep width="140"/>
					<Button:ClickButton id="clickButtonTermsOfUse"
										m_strText="{LocHandler.GS(LocGeneratedCode.Terms_of_Use)}" m_iLabelPaddingLeft="28" m_iLabelPaddingRight="4" m_iFontSize="12"
										m_png="{Embeded.s_imgTermsOfUse}"
										CLICKED="clickButtonTermsOfUse_CLICKED(event)"/>
				</Box:BoxContent>
			</Box:BoxBC>
		</Box:BoxGroup>
	</Box:BoxCanvas>
</PopBox:PopBoxBase>