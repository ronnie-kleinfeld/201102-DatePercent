<?xml version="1.0" encoding="utf-8"?>
<PopBox:PopBoxBase xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
				   width="250" height="203"
				   preinitialize="preinitializeHandler(event)" creationComplete="creationCompleteHandler(event)"
				   xmlns:PopBox="UI.Box.PopBox.*" xmlns:Box="UI.Box.*" xmlns:Photo="UI.Photo.*" xmlns:Button="UI.Button.*" xmlns:Label="UI.Label.*" xmlns:BalloonPhotos="Platform.Map.Balloon.BalloonPhotos.*" xmlns:BalloonLikes="Platform.Map.Balloon.BalloonLikes.*" xmlns:Friends="Platform.Map.Balloon.Friends.*" xmlns:UI="UI.*" xmlns:flexws="services.flexws.*" xmlns:BalloonFriends="Platform.Map.Balloon.BalloonFriends.*">
	<fx:Script>
		<![CDATA[
			import Data.Member.ActiveData;
			import Data.Member.BlackListedData;
			import Data.Member.FavoriteData;
			import Data.MemberData;
			
			import Handler.LocHandler;
			import Handler.SesHandler;
			
			import Platform.Map.Balloon.PresentsPopBox.PresentsPopBox;
			
			import UI.Box.BoxMDI;
			import UI.Box.MessageBox.MessageBox;
			import UI.Box.MessageBox.MessageBoxEvent;
			import UI.Box.PopBox.NodgePositionEnum;
			import UI.Button.ButtonBase;
			import UI.Button.ButtonEvent;
			import UI.Photo.PhotoBase;
			import UI.Photo.PhotoEvent;
			
			import Utils.AS3.Embeded;
			import Handler.LocGeneratedCode;
			import Utils.Log.Logger;
			
			import mx.events.FlexEvent;
			import mx.managers.CursorManager;
			
			[Bindable] public var m_memberData:MemberData;
			
			//class
			protected function preinitializeHandler(event:FlexEvent):void
			{
				m_enumNodgePosition = NodgePositionEnum.BALLOON_TOP_LEFT;
			}
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				boxGroup.InitPadding(m_enumNodgePosition);
				boxCanvas.InidNodge(m_enumNodgePosition);
			}
			public override function Init(p_buttonOpener:ButtonBase, p_photoOpener:PhotoBase):void
			{
				super.Init(p_buttonOpener, p_photoOpener);
				DoShowBox(boxCanvas);
			}
			public override function Dispose():void
			{
				super.Dispose();
				
				if (boxBC != null)
				{
					boxBC.Dispose();
				}
				if (boxCanvas != null)
				{
					boxCanvas.Dispose();
				}
				
				if (clickPhoto != null)
				{
					clickPhoto.Dispose();
					clickPhoto = null;
				}
				if (clickButtonStartChat != null)
				{
					clickButtonStartChat.Dispose();
					clickButtonStartChat = null;
				}
				if (selectButtonAddToFavorites != null)
				{
					selectButtonAddToFavorites.Dispose();
					selectButtonAddToFavorites = null;
				}
				if (clickButtonBlock != null)
				{
					clickButtonBlock.Dispose();
					clickButtonBlock = null;
				}
				if (simpleImageBirthdate != null)
				{
					simpleImageBirthdate.Dispose();
					simpleImageBirthdate = null;
				}
				if (simpleImageHoroscope != null)
				{
					simpleImageHoroscope.Dispose();
					simpleImageHoroscope = null;
				}
				if (simpleImageMemberPhotos != null)
				{
					simpleImageMemberPhotos.Dispose();
					simpleImageMemberPhotos = null;
				}
				if (balloonPhotosList != null)
				{
					balloonPhotosList.Dispose();
					balloonPhotosList = null;
				}
				if (simpleImageLikes != null)
				{
					simpleImageLikes.Dispose();
					simpleImageLikes = null;
				}
				if (balloonLikesList != null)
				{
					balloonLikesList.Dispose();
					balloonLikesList = null;
				}
				
				m_memberData = null;
			}
			
			public function GetData(p_memberData:MemberData):void
			{
				m_memberData = p_memberData;
				DoPaint();
			}
			public function DoPaint():void
			{
				DoShowContent(boxContent);
				balloonPhotosList.Init(m_memberData.Photos);
				balloonPhotosList.DoFill();
				balloonLikesList.Init(m_memberData.Likes);
				balloonLikesList.DoFill();
			}
			
			// events
			protected function clickPhoto_CLICKED(event:PhotoEvent):void
			{
				if (!m_memberData.IsMe)
				{
					SesHandler.Instance.Session.Actives.AddItemActiveData(new ActiveData(m_memberData.ID, ActiveData.MEMBER_DETAILS));
				}
			}
			protected function clickButtonStartChat_CLICKED(event:ButtonEvent):void
			{
				if (m_memberData.IsLinked)
				{
					SesHandler.Instance.Session.Actives.AddItemActiveData(new ActiveData(m_memberData.ID, ActiveData.MEMBER_DETAILS));
				}
				else
				{
					SesHandler.Instance.Session.Actives.AddItemActiveData(new ActiveData(m_memberData.ID, ActiveData.MEMBER_CHAT));
				}
			}
			
			private function selectButtonAddToFavorites_CLICKED(event:ButtonEvent):void
			{
				if (event.GetButton.Selected)
				{
					if (SesHandler.Instance.Session.Me.DontAskAddToFavorites)
					{
						SesHandler.Instance.Session.Favorites.AddItemFavoriteData(new FavoriteData(m_memberData.ID));
						callResponderAddMemberToFavorites.token = wsFlex.AddMemberToFavorites(SesHandler.Instance.Session.SID, m_memberData.ID);
					}
					else
					{
						BoxMDI.GetBoxMDI.AddMessageBox(LocHandler.GS(LocGeneratedCode.Add_to_FavoritesQ), LocHandler.GS(LocGeneratedCode.Add_this_member12to_your_favoritesQ), LocHandler.GS(LocGeneratedCode.Do_not_ask_me_again), m_memberData.Photo, MessageBox.YESNO, selectPhotoAddToFavoritesAddPostModalBox);
					}
				}
				else
				{
					if (SesHandler.Instance.Session.Me.DontAskRemoveFromFavorites)
					{
						SesHandler.Instance.Session.Favorites.RemoveItemFavoriteDataByID(m_memberData.ID);
						callResponderRemoveMemberFromFavorites.token = wsFlex.RemoveMemberFromFavorites(SesHandler.Instance.Session.SID, m_memberData.ID);
					}
					else
					{
						BoxMDI.GetBoxMDI.AddMessageBox(LocHandler.GS(LocGeneratedCode.Remove_from_FavoritesQ), LocHandler.GS(LocGeneratedCode.Remove_this_member12from_your_favoritesQ), LocHandler.GS(LocGeneratedCode.Do_not_ask_me_again), m_memberData.Photo, MessageBox.YESNO, selectPhotoAddToFavoritesRemovePostModalBox);
					}
				}
			}
			public function selectPhotoAddToFavoritesAddPostModalBox(event:MessageBoxEvent):void
			{
				if (event.type == MessageBox.YES)
				{
					if (event.DontAsk)
					{
						SesHandler.Instance.Session.Me.DontAskAddToFavorites = true;
						wsFlex.DontAskAddToFavorites(SesHandler.Instance.Session.SID);
					}
					SesHandler.Instance.Session.Favorites.AddItemFavoriteData(new FavoriteData(m_memberData.ID));
					callResponderAddMemberToFavorites.token = wsFlex.AddMemberToFavorites(SesHandler.Instance.Session.SID, m_memberData.ID);
				}
				else
				{
					selectButtonAddToFavorites.Selected = false;
				}
			}
			public function selectPhotoAddToFavoritesRemovePostModalBox(event:MessageBoxEvent):void
			{
				if (event.type == MessageBox.YES)
				{
					if (event.DontAsk)
					{
						SesHandler.Instance.Session.Me.DontAskRemoveFromFavorites = true;
						wsFlex.DontAskRemoveFromFavorites(SesHandler.Instance.Session.SID);
					}
					SesHandler.Instance.Session.Favorites.RemoveItemFavoriteDataByID(m_memberData.ID);
					callResponderRemoveMemberFromFavorites.token = wsFlex.RemoveMemberFromFavorites(SesHandler.Instance.Session.SID, m_memberData.ID);
				}
				else
				{
					selectButtonAddToFavorites.Selected = true;
				}
			}
			
			private function clickButtonSendPresent_CLICKED(event:ButtonEvent):void
			{
				SesHandler.Instance.Session.Actives.AddItemActiveData(new ActiveData(m_memberData.ID, ActiveData.SEND_PRESENT));
			}
			
			private function clickButtonSendWink_CLICKED(event:ButtonEvent):void
			{
				SesHandler.Instance.Session.Actives.AddItemActiveData(new ActiveData(m_memberData.ID, ActiveData.SEND_WINK));
			}
			
			private function selectButtonSendPresent_CLICKED(event:ButtonEvent):void
			{
				Logger.Instance.WriteEvent(event, flash.utils.getQualifiedClassName(this));
				var presentsPopBox:PresentsPopBox = new PresentsPopBox();
				BoxMDI.GetBoxMDI.AddNonModalPopUp(presentsPopBox);
				presentsPopBox.Init(null, null);
				presentsPopBox.GetData(m_memberData);
			}
			
			private function clickButtonBlock_CLICKED(event:ButtonEvent):void
			{
				Logger.Instance.WriteEvent(event, flash.utils.getQualifiedClassName(this));
				BoxMDI.GetBoxMDI.AddMessageBox(LocHandler.GS(LocGeneratedCode.Block_MemberQ), LocHandler.GS(LocGeneratedCode.Are_you_sure_you_want12to_block_this_memberQ), "", m_memberData.Photo, MessageBox.YESNO, clickButtonBlockPostModalBox);
			}
			public function clickButtonBlockPostModalBox(event:MessageBoxEvent):void
			{
				if (event.type == MessageBox.YES)
				{
					callResponderBlockMember.token = wsFlex.AddMemberFromBlackList(SesHandler.Instance.Session.SID, m_memberData.ID);
					SesHandler.Instance.Session.BlackListed.AddItemBlackListedData(new BlackListedData(m_memberData.ID));
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:CallResponder id="callResponderBlockMember"
						 result="Logger.Instance.WriteEvent(event, flash.utils.getQualifiedClassName(this));CursorManager.removeBusyCursor()"
						 fault="Logger.Instance.WriteFaultEvent(event, flash.utils.getQualifiedClassName(this));CursorManager.removeBusyCursor()"/>
		<s:CallResponder id="callResponderAddMemberToFavorites"
						 result="Logger.Instance.WriteEvent(event, flash.utils.getQualifiedClassName(this));CursorManager.removeBusyCursor()"
						 fault="Logger.Instance.WriteFaultEvent(event, flash.utils.getQualifiedClassName(this));CursorManager.removeBusyCursor()"/>
		<s:CallResponder id="callResponderRemoveMemberFromFavorites"
						 result="Logger.Instance.WriteEvent(event, flash.utils.getQualifiedClassName(this));CursorManager.removeBusyCursor()"
						 fault="Logger.Instance.WriteFaultEvent(event, flash.utils.getQualifiedClassName(this));CursorManager.removeBusyCursor()"/>
		<flexws:FlexWS id="wsFlex"
					   fault="Logger.Instance.WriteFaultEvent(event, flash.utils.getQualifiedClassName(this));CursorManager.removeBusyCursor()"/>
	</fx:Declarations>
	<Box:BoxCanvas id="boxCanvas" width="100%" height="100%">
		<Box:BoxGroup id="boxGroup" width="100%" height="100%">
			<Box:BoxBC id="boxBC" width="100%" height="100%" backgroundColor="0x3399ff" CLOSE="dispatchEvent(new Event(CLOSE))">
				<Box:BoxContent id="boxContent" width="100%" height="100%">
					<Box:layout>
						<s:VerticalLayout paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10"
										  gap="0"/>
					</Box:layout>
					<s:HGroup width="100%">
						<s:Group height="100%">
							<Photo:ClickPhoto id="clickPhoto" m_iSize="51" Photo="{m_memberData.Photo}" m_strTooltip="{LocHandler.GS(LocGeneratedCode.Click_to_see_large_photo)}" CLICKED="clickPhoto_CLICKED(event)"/>
							<Button:ClickButton id="clickButtonStartChat" top="47" left="-4" m_strText="{LocHandler.GS(LocGeneratedCode.Chat)}" m_strTooltip="{LocHandler.GS(LocGeneratedCode.Click_to_chat_with_this_member)}" m_iLabelPaddingLeft="8"
												visible="{!m_memberData.IsMe}"
												m_png="{Embeded.s_imgStartChatSmall}"
												CLICKED="clickButtonStartChat_CLICKED(event)"/>
						</s:Group>
						<s:VGroup width="100%" height="100%" gap="0">
							<Label:HeaderLabel text="{m_memberData.NickName}"/>
							<mx:Spacer height="1"/>
							<Label:NormalLabel visible="{!m_memberData.IsMe}" text="{LocHandler.GS(LocGeneratedCode.Age)}: {m_memberData.Age}"/>
							<Label:NormalLabel visible="{!m_memberData.IsMe}" text="{LocHandler.GS(LocGeneratedCode.Distance)}: {m_memberData.DistanceLabel}"/>
							<Label:NormalLabel visible="{!m_memberData.IsMe}" text="{LocHandler.GS(LocGeneratedCode.DatePrecentage)}: {m_memberData.DatePercentageLabel}"/>
						</s:VGroup>
						<s:VGroup width="20" height="100%" horizontalAlign="center" gap="4">
							<Button:ClickButton id="clickButtonSendPresent" width="17" height="17" visible="{!m_memberData.IsMe}"
												m_strTooltip="{LocHandler.GS(LocGeneratedCode.Send_present)}" m_png="{Embeded.s_imgSendGift}"
												CLICKED="clickButtonSendPresent_CLICKED(event)"/>
							<Button:ClickButton id="clickButtonSendWink" width="17" height="17" visible="{!m_memberData.IsMe}"
												m_strTooltip="{LocHandler.GS(LocGeneratedCode.Send_wink)}" m_png="{Embeded.s_imgSendTwink}"
												CLICKED="clickButtonSendWink_CLICKED(event)"/>
						</s:VGroup>
						<s:VGroup width="20" height="100%" horizontalAlign="center" gap="4">
							<Button:SelectButton id="selectButtonAddToFavorites" width="17" height="17" visible="{!m_memberData.IsMe}"
												 m_strTooltip="{selectButtonAddToFavorites.Selected?LocHandler.GS(LocGeneratedCode.Remove_from_Favorites):LocHandler.GS(LocGeneratedCode.Add_to_Favorites)}" m_png="{Embeded.s_imgFavorite}" Selected="{m_memberData.IsFavorite}"
												 CLICKED="selectButtonAddToFavorites_CLICKED(event)"/>
							<Button:ClickButton id="clickButtonBlock" width="17" height="17" visible="{!m_memberData.IsMe}"
												m_strTooltip="{LocHandler.GS(LocGeneratedCode.Block_Member)}" m_png="{Embeded.s_imgBlock}"
												CLICKED="clickButtonBlock_CLICKED(event)"/>
						</s:VGroup>
					</s:HGroup>
					<s:HGroup width="100%" verticalAlign="middle" height="28" gap="2">
						<UI:SimpleImage id="simpleImageBirthdate" m_png="{Embeded.s_imgBirthdayCake}" toolTip="{LocHandler.GS(LocGeneratedCode.Birthdate)}"/>
						<mx:Spacer width="4"/>
						<Label:NormalLabel text="{m_memberData.BirthdateLabel}"/>
						<mx:Spacer width="10"/>
						<UI:SimpleImage id="simpleImageHoroscope" m_png="{m_memberData.HoroscopePng}" toolTip="{LocHandler.GS(LocGeneratedCode.Horoscope)}"/>
						<mx:Spacer width="4"/>
						<Label:NormalLabel text="{m_memberData.HoroscopeLabel}"/>
					</s:HGroup>
					<s:HGroup width="100%" verticalAlign="middle" height="28" gap="2">
						<UI:SimpleImage id="simpleImageMemberPhotos" m_png="{Embeded.s_imgShowMemberPhotos}" width="17" toolTip="{LocHandler.GS(LocGeneratedCode.Member_s_Photos)}"/>
						<BalloonPhotos:BalloonPhotosList id="balloonPhotosList" width="100%" height="32" m_iPaintedListItemCount="6" m_iPaintedListItemStpes="6"
														 m_bAddSep="false"/>
					</s:HGroup>
					<s:HGroup width="100%" verticalAlign="middle" height="28" gap="2">
						<UI:SimpleImage id="simpleImageLikes" m_png="{Embeded.s_imgLike}" width="17" toolTip="{LocHandler.GS(LocGeneratedCode.Things_you_both_like)}"/>
						<BalloonLikes:BalloonLikesList id="balloonLikesList" width="100%" height="28" m_iPaintedListItemCount="7" m_iPaintedListItemStpes="7"
													   m_bAddSep="false"/>
					</s:HGroup>
				</Box:BoxContent>
			</Box:BoxBC>
		</Box:BoxGroup>
	</Box:BoxCanvas>
</PopBox:PopBoxBase>