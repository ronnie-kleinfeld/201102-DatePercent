<?xml version="1.0" encoding="utf-8"?>
<ModalBox:ModalBoxBase xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="420" height="257"
					   initialize="initializeHandler(event)"
					   xmlns:ModalBox="UI.Box.ModalBox.*" xmlns:Box="UI.Box.*" xmlns:Photo="UI.Photo.*" xmlns:Label="UI.Label.*" xmlns:UI="UI.*" xmlns:Button="UI.Button.*" xmlns:flexws="services.flexws.*">
	<fx:Metadata>
		[Event(name=CLOSE, type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import Data.MemberData;
			
			import Handler.LocHandler;
			import Handler.SesHandler;
			
			import UI.Box.BoxMDI;
			import UI.Box.MessageBox.MessageBox;
			import UI.Box.MessageBox.MessageBoxEvent;
			import UI.Button.ButtonBase;
			import UI.Button.ButtonEvent;
			import UI.Photo.PhotoBase;
			
			import Utils.AS3.Embeded;
			import Handler.LocGeneratedCode;
			import Utils.Log.Logger;
			
			import mx.events.FlexEvent;
			import mx.managers.CursorManager;
			import mx.validators.EmailValidator;
			import mx.validators.ValidationResult;
			
			[Bindable] private var m_memberData:MemberData;
			private var m_emailValidator:EmailValidator;
			
			//class
			protected function initializeHandler(event:FlexEvent):void
			{
				m_emailValidator = new EmailValidator();
				m_emailValidator.required = true;
			}
			public override function Init(p_buttonOpener:ButtonBase, p_photoOpener:PhotoBase):void
			{
				super.Init(p_buttonOpener, p_photoOpener);
				DoShowBox(boxCanvas);
			}
			public override function Dispose():void
			{
				super.Dispose();
				
				if (boxBC != null)
				{
					boxBC.Dispose();
				}
				if (boxCanvas != null)
				{
					boxCanvas.Dispose();
				}
				
				if (simplePhoto != null)
				{
					simplePhoto.Dispose();
					simplePhoto = null;
				}
				if (clickButtonYes != null)
				{
					clickButtonYes.Dispose();
					clickButtonYes = null;
				}
				if (clickButtonNo != null)
				{
					clickButtonNo.Dispose();
					clickButtonNo = null;
				}
				
				m_emailValidator = null;
				m_memberData = null;
			}
			
			public function GetData(p_memberData:MemberData):void
			{
				m_memberData = p_memberData;
				DoPaint();
			}
			public function DoPaint():void
			{
				DoShowContent(boxContent);
			}
			
			// events
			protected function clickButtonYes_CLICKED(event:ButtonEvent):void
			{
				if (m_emailValidator.validate(textInputNormalEMail.text).results == null)
				{
					callResponderShareMemberWithAFriend.token = wsFlex.ShareMemberWithAFriend(SesHandler.Instance.Session.SID, m_memberData.UID, textInputNormalEMail.text, textAreaNormalBody.text);
					if (SesHandler.Instance.Session.Me.DontAskInvitationSend)
					{
						dispatchEvent(new Event(CLOSE));
					}
					else
					{
						BoxMDI.GetBoxMDI.AddMessageBox("", LocHandler.GS(LocGeneratedCode.Your_invitation_was_sent_successfully12Thanks_for_your_time), LocHandler.GS(LocGeneratedCode.Do_not_tell_me_again), null, MessageBox.YES, clickButtonYesPostModalBox);
					}
				}
				else
				{
					var validationResult:ValidationResult = ValidationResult(m_emailValidator.validate(textInputNormalEMail.text).results[0]);
					textInputNormalEMail.errorString = validationResult.errorMessage;
				}
			}
			public function clickButtonYesPostModalBox(event:MessageBoxEvent):void
			{
				if (event.DontAsk)
				{
					SesHandler.Instance.Session.Me.DontAskInvitationSend = true;
					wsFlex.DontAskInvitationSend(SesHandler.Instance.Session.SID);
				}
				dispatchEvent(new Event(CLOSE));
			}
			
			protected function clickButtonNo_CLICKED(event:ButtonEvent):void
			{
				dispatchEvent(new Event(CLOSE));
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:CallResponder id="callResponderShareMemberWithAFriend"
						 result="Logger.Instance.WriteEvent(event, flash.utils.getQualifiedClassName(this));CursorManager.removeBusyCursor()"
						 fault="Logger.Instance.WriteFaultEvent(event, flash.utils.getQualifiedClassName(this));CursorManager.removeBusyCursor()"/>
		<flexws:FlexWS id="wsFlex"
					   fault="Logger.Instance.WriteFaultEvent(event, flash.utils.getQualifiedClassName(this));CursorManager.removeBusyCursor()"/>
	</fx:Declarations>
	<Box:BoxCanvas id="boxCanvas" width="100%" height="100%">
		<Box:BoxGroup id="boxGroup" width="100%" height="100%">
			<Box:BoxBC id="boxBC" width="100%" height="100%" CLOSE="dispatchEvent(new Event(CLOSE))">
				<Box:BoxContent id="boxContent" width="100%" height="100%">
					<s:HGroup width="100%" height="100%" gap="7" verticalAlign="middle">
						<Photo:SimplePhoto id="simplePhoto" visible="{m_memberData.Photo!=null}" m_iSize="{m_memberData.Photo==null?0:49}" Photo="{m_memberData.Photo}"/>
						<Label:HeaderLabel text="{LocHandler.GS(LocGeneratedCode.Share_this_member_with_a_friend)}"/>
					</s:HGroup>
					<mx:Canvas width="100%" height="20">
						<UI:InnerShadow id="innerShadowEMail" m_strGrayedText="{LocHandler.GS(LocGeneratedCode.e_g___email_gmail_com__required_)}" m_strLiveText="{textInputNormalEMail.text}"/>
						<UI:TextInputNormal id="textInputNormalEMail"/>
					</mx:Canvas>
					<mx:Canvas width="400" height="120">
						<UI:InnerShadow m_strGrayedText="{LocHandler.GS(LocGeneratedCode.Write_a_personal_message_to_your_friend__optional_)}" m_strLiveText="{textAreaNormalBody.text}"/>
						<UI:TextAreaNormal id="textAreaNormalBody"/>
					</mx:Canvas>
					<s:HGroup width="100%">
						<mx:Spacer width="100%"/>
						<Button:ClickButton id="clickButtonYes" m_strTooltip="{LocHandler.GS(LocGeneratedCode.Yes)}" m_png="{Embeded.s_imgYes}" CLICKED="clickButtonYes_CLICKED(event)"/>
						<Button:ClickButton id="clickButtonNo" m_strTooltip="{LocHandler.GS(LocGeneratedCode.No)}" m_png="{Embeded.s_imgNo}" CLICKED="clickButtonNo_CLICKED(event)"/>
					</s:HGroup>
				</Box:BoxContent>
			</Box:BoxBC>
		</Box:BoxGroup>
	</Box:BoxCanvas>
</ModalBox:ModalBoxBase>