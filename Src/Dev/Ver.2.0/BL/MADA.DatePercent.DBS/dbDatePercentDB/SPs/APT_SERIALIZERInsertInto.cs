//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by the Database Schema tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
//
//     Exception should be handled in a higher layer.
//
//     generation time: 07/12/2011 12:25
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using Microsoft.Practices.EnterpriseLibrary.Data;

namespace MADA.DatePercent.DBS.dbDatePercentDB.SPs
{
public class procAPT_SERIALIZERInsertInto
{
public const string _Name = "APT_SERIALIZERInsertInto";
public const string _Caption = "APT_ SERIALIZERInsert Into";

public static SqlCommand SqlCommand()
{
System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand();
cmd.CommandType = CommandType.StoredProcedure;
cmd.CommandText = "APT_SERIALIZERInsertInto";
SqlParameterCollection(cmd.Parameters);
return cmd;
}
public static SqlCommand SqlCommand(
string p_strSRL_DESCRIPTION, string p_strSRL_KEY_1, string p_strSRL_KEY_2)
{
System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand();
cmd.CommandType = CommandType.StoredProcedure;
cmd.CommandText = "APT_SERIALIZERInsertInto";
SqlParameterCollection(cmd.Parameters, p_strSRL_DESCRIPTION, p_strSRL_KEY_1, p_strSRL_KEY_2);
return cmd;
}
public static void SqlParameterCollection(
System.Data.SqlClient.SqlParameterCollection p_oSqlParameterCollection)
{
p_oSqlParameterCollection.Clear();
p_oSqlParameterCollection.Add(parSRL_DESCRIPTION._SqlParameter());
p_oSqlParameterCollection.Add(parSRL_KEY_1._SqlParameter());
p_oSqlParameterCollection.Add(parSRL_KEY_2._SqlParameter());
}
public static void SqlParameterCollection(
System.Data.SqlClient.SqlParameterCollection p_oSqlParameterCollection
, string p_strSRL_DESCRIPTION, string p_strSRL_KEY_1, string p_strSRL_KEY_2)
{
p_oSqlParameterCollection.Clear();
p_oSqlParameterCollection.Add(parSRL_DESCRIPTION._SqlParameter(p_strSRL_DESCRIPTION));
p_oSqlParameterCollection.Add(parSRL_KEY_1._SqlParameter(p_strSRL_KEY_1));
p_oSqlParameterCollection.Add(parSRL_KEY_2._SqlParameter(p_strSRL_KEY_2));
}
public class parSRL_DESCRIPTION
{
public const string _Name = "@SRL_DESCRIPTION";
public const string _Caption = "@ SRL_ DESCRIPTION";
public const string _ParentName = "APT_SERIALIZERInsertInto";
public const SqlDbType _SqlDbType = SqlDbType.NVarChar;
public const Int32 _Length = 255;
public const bool _IsNullable = true;
public const string _BindDataAdapter = "APT_SERIALIZERInsertInto.DefaultView.[0].@SRL_DESCRIPTION";
public const string _BindDataReader = "[@SRL_DESCRIPTION]";
public const ParameterDirection _ParameterDirection = ParameterDirection.Input;
public static SqlParameter _SqlParameter()
{
return DBS.Tools.CreateSqlParameterReferenceType("@SRL_DESCRIPTION", 255, -1, 255, SqlDbType.NVarChar, "string", ParameterDirection.Input, true, false, "");
}
public static SqlParameter _SqlParameter(string Value)
{
return DBS.Tools.CreateSqlParameterReferenceType("@SRL_DESCRIPTION", 255, -1, 255, SqlDbType.NVarChar, "string", ParameterDirection.Input, true, false, "", Value);
}
}
public class parSRL_KEY_1
{
public const string _Name = "@SRL_KEY_1";
public const string _Caption = "@ SRL_ KEY_1";
public const string _ParentName = "APT_SERIALIZERInsertInto";
public const SqlDbType _SqlDbType = SqlDbType.NVarChar;
public const Int32 _Length = 5;
public const bool _IsNullable = true;
public const string _BindDataAdapter = "APT_SERIALIZERInsertInto.DefaultView.[0].@SRL_KEY_1";
public const string _BindDataReader = "[@SRL_KEY_1]";
public const ParameterDirection _ParameterDirection = ParameterDirection.Input;
public static SqlParameter _SqlParameter()
{
return DBS.Tools.CreateSqlParameterReferenceType("@SRL_KEY_1", 5, -1, 5, SqlDbType.NVarChar, "string", ParameterDirection.Input, true, false, "");
}
public static SqlParameter _SqlParameter(string Value)
{
return DBS.Tools.CreateSqlParameterReferenceType("@SRL_KEY_1", 5, -1, 5, SqlDbType.NVarChar, "string", ParameterDirection.Input, true, false, "", Value);
}
}
public class parSRL_KEY_2
{
public const string _Name = "@SRL_KEY_2";
public const string _Caption = "@ SRL_ KEY_2";
public const string _ParentName = "APT_SERIALIZERInsertInto";
public const SqlDbType _SqlDbType = SqlDbType.NVarChar;
public const Int32 _Length = 5;
public const bool _IsNullable = true;
public const string _BindDataAdapter = "APT_SERIALIZERInsertInto.DefaultView.[0].@SRL_KEY_2";
public const string _BindDataReader = "[@SRL_KEY_2]";
public const ParameterDirection _ParameterDirection = ParameterDirection.Input;
public static SqlParameter _SqlParameter()
{
return DBS.Tools.CreateSqlParameterReferenceType("@SRL_KEY_2", 5, -1, 5, SqlDbType.NVarChar, "string", ParameterDirection.Input, true, false, "");
}
public static SqlParameter _SqlParameter(string Value)
{
return DBS.Tools.CreateSqlParameterReferenceType("@SRL_KEY_2", 5, -1, 5, SqlDbType.NVarChar, "string", ParameterDirection.Input, true, false, "", Value);
}
}
public class inSRL_DESCRIPTION : parSRL_DESCRIPTION {}
public class inSRL_KEY_1 : parSRL_KEY_1 {}
public class inSRL_KEY_2 : parSRL_KEY_2 {}
public static int ExecuteNonQuery(
string p_strSRL_DESCRIPTION, string p_strSRL_KEY_1, string p_strSRL_KEY_2)
{
try
{
Microsoft.Practices.EnterpriseLibrary.Data.Database db = DatabaseFactory.CreateDatabase();
SqlCommand cmd = SqlCommand(p_strSRL_DESCRIPTION, p_strSRL_KEY_1, p_strSRL_KEY_2);
int iResult = db.ExecuteNonQuery(cmd);

return iResult;
}
catch (System.Exception ex)
{
MADA.DatePercent.DBS.Tools.WriteToLog(ex, System.Reflection.MethodBase.GetCurrentMethod());
throw;
}
}
public static int ExecuteNonQuery(
string p_strSRL_DESCRIPTION, string p_strSRL_KEY_1, string p_strSRL_KEY_2,Microsoft.Practices.EnterpriseLibrary.Data.Database p_db,System.Data.Common.DbTransaction p_trn)
{
try
{
SqlCommand cmd = SqlCommand(p_strSRL_DESCRIPTION, p_strSRL_KEY_1, p_strSRL_KEY_2);
int iResult = p_db.ExecuteNonQuery(cmd, p_trn);

return iResult;
}
catch (System.Exception ex)
{
MADA.DatePercent.DBS.Tools.WriteToLog(ex, System.Reflection.MethodBase.GetCurrentMethod());
throw;
}
}
}
}
