//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MADA.DatePercent.BB.NLB.WS {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ApplicationHandler")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ApplicationHandler : global::System.Data.DataSet {
        
        private T_IP_LAT_LNGDataTable tableT_IP_LAT_LNG;
        
        private T_IP_LAT_LNG_ValidateDataTable tableT_IP_LAT_LNG_Validate;
        
        private T_REGISTERDataTable tableT_REGISTER;
        
        private T_HOSTINGDataTable tableT_HOSTING;
        
        private PT_SERVERSelectBySRV_SERVER_TYPE_IISDataTable tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS;
        
        private PT_SERVERSelectBySRV_SERVER_TYPE_BLDataTable tablePT_SERVERSelectBySRV_SERVER_TYPE_BL;
        
        private T_SERVERDataTable tableT_SERVER;
        
        private T_SERVER_IISDataTable tableT_SERVER_IIS;
        
        private T_SERVER_BLDataTable tableT_SERVER_BL;
        
        private T_FB_LOCALE_TYPEDataTable tableT_FB_LOCALE_TYPE;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ApplicationHandler() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ApplicationHandler(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["T_IP_LAT_LNG"] != null)) {
                    base.Tables.Add(new T_IP_LAT_LNGDataTable(ds.Tables["T_IP_LAT_LNG"]));
                }
                if ((ds.Tables["T_IP_LAT_LNG_Validate"] != null)) {
                    base.Tables.Add(new T_IP_LAT_LNG_ValidateDataTable(ds.Tables["T_IP_LAT_LNG_Validate"]));
                }
                if ((ds.Tables["T_REGISTER"] != null)) {
                    base.Tables.Add(new T_REGISTERDataTable(ds.Tables["T_REGISTER"]));
                }
                if ((ds.Tables["T_HOSTING"] != null)) {
                    base.Tables.Add(new T_HOSTINGDataTable(ds.Tables["T_HOSTING"]));
                }
                if ((ds.Tables["PT_SERVERSelectBySRV_SERVER_TYPE_IIS"] != null)) {
                    base.Tables.Add(new PT_SERVERSelectBySRV_SERVER_TYPE_IISDataTable(ds.Tables["PT_SERVERSelectBySRV_SERVER_TYPE_IIS"]));
                }
                if ((ds.Tables["PT_SERVERSelectBySRV_SERVER_TYPE_BL"] != null)) {
                    base.Tables.Add(new PT_SERVERSelectBySRV_SERVER_TYPE_BLDataTable(ds.Tables["PT_SERVERSelectBySRV_SERVER_TYPE_BL"]));
                }
                if ((ds.Tables["T_SERVER"] != null)) {
                    base.Tables.Add(new T_SERVERDataTable(ds.Tables["T_SERVER"]));
                }
                if ((ds.Tables["T_SERVER_IIS"] != null)) {
                    base.Tables.Add(new T_SERVER_IISDataTable(ds.Tables["T_SERVER_IIS"]));
                }
                if ((ds.Tables["T_SERVER_BL"] != null)) {
                    base.Tables.Add(new T_SERVER_BLDataTable(ds.Tables["T_SERVER_BL"]));
                }
                if ((ds.Tables["T_FB_LOCALE_TYPE"] != null)) {
                    base.Tables.Add(new T_FB_LOCALE_TYPEDataTable(ds.Tables["T_FB_LOCALE_TYPE"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public T_IP_LAT_LNGDataTable T_IP_LAT_LNG {
            get {
                return this.tableT_IP_LAT_LNG;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public T_IP_LAT_LNG_ValidateDataTable T_IP_LAT_LNG_Validate {
            get {
                return this.tableT_IP_LAT_LNG_Validate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public T_REGISTERDataTable T_REGISTER {
            get {
                return this.tableT_REGISTER;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public T_HOSTINGDataTable T_HOSTING {
            get {
                return this.tableT_HOSTING;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PT_SERVERSelectBySRV_SERVER_TYPE_IISDataTable PT_SERVERSelectBySRV_SERVER_TYPE_IIS {
            get {
                return this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PT_SERVERSelectBySRV_SERVER_TYPE_BLDataTable PT_SERVERSelectBySRV_SERVER_TYPE_BL {
            get {
                return this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public T_SERVERDataTable T_SERVER {
            get {
                return this.tableT_SERVER;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public T_SERVER_IISDataTable T_SERVER_IIS {
            get {
                return this.tableT_SERVER_IIS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public T_SERVER_BLDataTable T_SERVER_BL {
            get {
                return this.tableT_SERVER_BL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public T_FB_LOCALE_TYPEDataTable T_FB_LOCALE_TYPE {
            get {
                return this.tableT_FB_LOCALE_TYPE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ApplicationHandler cln = ((ApplicationHandler)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["T_IP_LAT_LNG"] != null)) {
                    base.Tables.Add(new T_IP_LAT_LNGDataTable(ds.Tables["T_IP_LAT_LNG"]));
                }
                if ((ds.Tables["T_IP_LAT_LNG_Validate"] != null)) {
                    base.Tables.Add(new T_IP_LAT_LNG_ValidateDataTable(ds.Tables["T_IP_LAT_LNG_Validate"]));
                }
                if ((ds.Tables["T_REGISTER"] != null)) {
                    base.Tables.Add(new T_REGISTERDataTable(ds.Tables["T_REGISTER"]));
                }
                if ((ds.Tables["T_HOSTING"] != null)) {
                    base.Tables.Add(new T_HOSTINGDataTable(ds.Tables["T_HOSTING"]));
                }
                if ((ds.Tables["PT_SERVERSelectBySRV_SERVER_TYPE_IIS"] != null)) {
                    base.Tables.Add(new PT_SERVERSelectBySRV_SERVER_TYPE_IISDataTable(ds.Tables["PT_SERVERSelectBySRV_SERVER_TYPE_IIS"]));
                }
                if ((ds.Tables["PT_SERVERSelectBySRV_SERVER_TYPE_BL"] != null)) {
                    base.Tables.Add(new PT_SERVERSelectBySRV_SERVER_TYPE_BLDataTable(ds.Tables["PT_SERVERSelectBySRV_SERVER_TYPE_BL"]));
                }
                if ((ds.Tables["T_SERVER"] != null)) {
                    base.Tables.Add(new T_SERVERDataTable(ds.Tables["T_SERVER"]));
                }
                if ((ds.Tables["T_SERVER_IIS"] != null)) {
                    base.Tables.Add(new T_SERVER_IISDataTable(ds.Tables["T_SERVER_IIS"]));
                }
                if ((ds.Tables["T_SERVER_BL"] != null)) {
                    base.Tables.Add(new T_SERVER_BLDataTable(ds.Tables["T_SERVER_BL"]));
                }
                if ((ds.Tables["T_FB_LOCALE_TYPE"] != null)) {
                    base.Tables.Add(new T_FB_LOCALE_TYPEDataTable(ds.Tables["T_FB_LOCALE_TYPE"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableT_IP_LAT_LNG = ((T_IP_LAT_LNGDataTable)(base.Tables["T_IP_LAT_LNG"]));
            if ((initTable == true)) {
                if ((this.tableT_IP_LAT_LNG != null)) {
                    this.tableT_IP_LAT_LNG.InitVars();
                }
            }
            this.tableT_IP_LAT_LNG_Validate = ((T_IP_LAT_LNG_ValidateDataTable)(base.Tables["T_IP_LAT_LNG_Validate"]));
            if ((initTable == true)) {
                if ((this.tableT_IP_LAT_LNG_Validate != null)) {
                    this.tableT_IP_LAT_LNG_Validate.InitVars();
                }
            }
            this.tableT_REGISTER = ((T_REGISTERDataTable)(base.Tables["T_REGISTER"]));
            if ((initTable == true)) {
                if ((this.tableT_REGISTER != null)) {
                    this.tableT_REGISTER.InitVars();
                }
            }
            this.tableT_HOSTING = ((T_HOSTINGDataTable)(base.Tables["T_HOSTING"]));
            if ((initTable == true)) {
                if ((this.tableT_HOSTING != null)) {
                    this.tableT_HOSTING.InitVars();
                }
            }
            this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS = ((PT_SERVERSelectBySRV_SERVER_TYPE_IISDataTable)(base.Tables["PT_SERVERSelectBySRV_SERVER_TYPE_IIS"]));
            if ((initTable == true)) {
                if ((this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS != null)) {
                    this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.InitVars();
                }
            }
            this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL = ((PT_SERVERSelectBySRV_SERVER_TYPE_BLDataTable)(base.Tables["PT_SERVERSelectBySRV_SERVER_TYPE_BL"]));
            if ((initTable == true)) {
                if ((this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL != null)) {
                    this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.InitVars();
                }
            }
            this.tableT_SERVER = ((T_SERVERDataTable)(base.Tables["T_SERVER"]));
            if ((initTable == true)) {
                if ((this.tableT_SERVER != null)) {
                    this.tableT_SERVER.InitVars();
                }
            }
            this.tableT_SERVER_IIS = ((T_SERVER_IISDataTable)(base.Tables["T_SERVER_IIS"]));
            if ((initTable == true)) {
                if ((this.tableT_SERVER_IIS != null)) {
                    this.tableT_SERVER_IIS.InitVars();
                }
            }
            this.tableT_SERVER_BL = ((T_SERVER_BLDataTable)(base.Tables["T_SERVER_BL"]));
            if ((initTable == true)) {
                if ((this.tableT_SERVER_BL != null)) {
                    this.tableT_SERVER_BL.InitVars();
                }
            }
            this.tableT_FB_LOCALE_TYPE = ((T_FB_LOCALE_TYPEDataTable)(base.Tables["T_FB_LOCALE_TYPE"]));
            if ((initTable == true)) {
                if ((this.tableT_FB_LOCALE_TYPE != null)) {
                    this.tableT_FB_LOCALE_TYPE.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ApplicationHandler";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ApplicationHandler.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableT_IP_LAT_LNG = new T_IP_LAT_LNGDataTable();
            base.Tables.Add(this.tableT_IP_LAT_LNG);
            this.tableT_IP_LAT_LNG_Validate = new T_IP_LAT_LNG_ValidateDataTable();
            base.Tables.Add(this.tableT_IP_LAT_LNG_Validate);
            this.tableT_REGISTER = new T_REGISTERDataTable();
            base.Tables.Add(this.tableT_REGISTER);
            this.tableT_HOSTING = new T_HOSTINGDataTable();
            base.Tables.Add(this.tableT_HOSTING);
            this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS = new PT_SERVERSelectBySRV_SERVER_TYPE_IISDataTable();
            base.Tables.Add(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS);
            this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL = new PT_SERVERSelectBySRV_SERVER_TYPE_BLDataTable();
            base.Tables.Add(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL);
            this.tableT_SERVER = new T_SERVERDataTable();
            base.Tables.Add(this.tableT_SERVER);
            this.tableT_SERVER_IIS = new T_SERVER_IISDataTable();
            base.Tables.Add(this.tableT_SERVER_IIS);
            this.tableT_SERVER_BL = new T_SERVER_BLDataTable();
            base.Tables.Add(this.tableT_SERVER_BL);
            this.tableT_FB_LOCALE_TYPE = new T_FB_LOCALE_TYPEDataTable();
            base.Tables.Add(this.tableT_FB_LOCALE_TYPE);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeT_IP_LAT_LNG() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeT_IP_LAT_LNG_Validate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeT_REGISTER() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeT_HOSTING() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePT_SERVERSelectBySRV_SERVER_TYPE_IIS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePT_SERVERSelectBySRV_SERVER_TYPE_BL() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeT_SERVER() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeT_SERVER_IIS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeT_SERVER_BL() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeT_FB_LOCALE_TYPE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ApplicationHandler ds = new ApplicationHandler();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void T_IP_LAT_LNGRowChangeEventHandler(object sender, T_IP_LAT_LNGRowChangeEvent e);
        
        public delegate void T_IP_LAT_LNG_ValidateRowChangeEventHandler(object sender, T_IP_LAT_LNG_ValidateRowChangeEvent e);
        
        public delegate void T_REGISTERRowChangeEventHandler(object sender, T_REGISTERRowChangeEvent e);
        
        public delegate void T_HOSTINGRowChangeEventHandler(object sender, T_HOSTINGRowChangeEvent e);
        
        public delegate void PT_SERVERSelectBySRV_SERVER_TYPE_IISRowChangeEventHandler(object sender, PT_SERVERSelectBySRV_SERVER_TYPE_IISRowChangeEvent e);
        
        public delegate void PT_SERVERSelectBySRV_SERVER_TYPE_BLRowChangeEventHandler(object sender, PT_SERVERSelectBySRV_SERVER_TYPE_BLRowChangeEvent e);
        
        public delegate void T_SERVERRowChangeEventHandler(object sender, T_SERVERRowChangeEvent e);
        
        public delegate void T_SERVER_IISRowChangeEventHandler(object sender, T_SERVER_IISRowChangeEvent e);
        
        public delegate void T_SERVER_BLRowChangeEventHandler(object sender, T_SERVER_BLRowChangeEvent e);
        
        public delegate void T_FB_LOCALE_TYPERowChangeEventHandler(object sender, T_FB_LOCALE_TYPERowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class T_IP_LAT_LNGDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnIPL_IP;
            
            private global::System.Data.DataColumn columnIPL_LAT;
            
            private global::System.Data.DataColumn columnIPL_LNG;
            
            private global::System.Data.DataColumn columnIPL_IIS_SERVER_ID;
            
            private global::System.Data.DataColumn columnIPL_BL_SERVER_ID;
            
            private global::System.Data.DataColumn columnIPL_VALIDATE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IP_LAT_LNGDataTable() {
                this.TableName = "T_IP_LAT_LNG";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal T_IP_LAT_LNGDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected T_IP_LAT_LNGDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IPL_IPColumn {
                get {
                    return this.columnIPL_IP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IPL_LATColumn {
                get {
                    return this.columnIPL_LAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IPL_LNGColumn {
                get {
                    return this.columnIPL_LNG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IPL_IIS_SERVER_IDColumn {
                get {
                    return this.columnIPL_IIS_SERVER_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IPL_BL_SERVER_IDColumn {
                get {
                    return this.columnIPL_BL_SERVER_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IPL_VALIDATEColumn {
                get {
                    return this.columnIPL_VALIDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IP_LAT_LNGRow this[int index] {
                get {
                    return ((T_IP_LAT_LNGRow)(this.Rows[index]));
                }
            }
            
            public event T_IP_LAT_LNGRowChangeEventHandler T_IP_LAT_LNGRowChanging;
            
            public event T_IP_LAT_LNGRowChangeEventHandler T_IP_LAT_LNGRowChanged;
            
            public event T_IP_LAT_LNGRowChangeEventHandler T_IP_LAT_LNGRowDeleting;
            
            public event T_IP_LAT_LNGRowChangeEventHandler T_IP_LAT_LNGRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddT_IP_LAT_LNGRow(T_IP_LAT_LNGRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IP_LAT_LNGRow AddT_IP_LAT_LNGRow(long IPL_IP, decimal IPL_LAT, decimal IPL_LNG, int IPL_IIS_SERVER_ID, int IPL_BL_SERVER_ID, bool IPL_VALIDATE) {
                T_IP_LAT_LNGRow rowT_IP_LAT_LNGRow = ((T_IP_LAT_LNGRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IPL_IP,
                        IPL_LAT,
                        IPL_LNG,
                        IPL_IIS_SERVER_ID,
                        IPL_BL_SERVER_ID,
                        IPL_VALIDATE};
                rowT_IP_LAT_LNGRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowT_IP_LAT_LNGRow);
                return rowT_IP_LAT_LNGRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IP_LAT_LNGRow FindByIPL_IP(long IPL_IP) {
                return ((T_IP_LAT_LNGRow)(this.Rows.Find(new object[] {
                            IPL_IP})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                T_IP_LAT_LNGDataTable cln = ((T_IP_LAT_LNGDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new T_IP_LAT_LNGDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIPL_IP = base.Columns["IPL_IP"];
                this.columnIPL_LAT = base.Columns["IPL_LAT"];
                this.columnIPL_LNG = base.Columns["IPL_LNG"];
                this.columnIPL_IIS_SERVER_ID = base.Columns["IPL_IIS_SERVER_ID"];
                this.columnIPL_BL_SERVER_ID = base.Columns["IPL_BL_SERVER_ID"];
                this.columnIPL_VALIDATE = base.Columns["IPL_VALIDATE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIPL_IP = new global::System.Data.DataColumn("IPL_IP", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIPL_IP);
                this.columnIPL_LAT = new global::System.Data.DataColumn("IPL_LAT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIPL_LAT);
                this.columnIPL_LNG = new global::System.Data.DataColumn("IPL_LNG", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIPL_LNG);
                this.columnIPL_IIS_SERVER_ID = new global::System.Data.DataColumn("IPL_IIS_SERVER_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIPL_IIS_SERVER_ID);
                this.columnIPL_BL_SERVER_ID = new global::System.Data.DataColumn("IPL_BL_SERVER_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIPL_BL_SERVER_ID);
                this.columnIPL_VALIDATE = new global::System.Data.DataColumn("IPL_VALIDATE", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIPL_VALIDATE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIPL_IP}, true));
                this.columnIPL_IP.AllowDBNull = false;
                this.columnIPL_IP.Unique = true;
                this.columnIPL_LAT.AllowDBNull = false;
                this.columnIPL_LNG.AllowDBNull = false;
                this.columnIPL_IIS_SERVER_ID.AllowDBNull = false;
                this.columnIPL_BL_SERVER_ID.AllowDBNull = false;
                this.columnIPL_VALIDATE.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IP_LAT_LNGRow NewT_IP_LAT_LNGRow() {
                return ((T_IP_LAT_LNGRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new T_IP_LAT_LNGRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(T_IP_LAT_LNGRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.T_IP_LAT_LNGRowChanged != null)) {
                    this.T_IP_LAT_LNGRowChanged(this, new T_IP_LAT_LNGRowChangeEvent(((T_IP_LAT_LNGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.T_IP_LAT_LNGRowChanging != null)) {
                    this.T_IP_LAT_LNGRowChanging(this, new T_IP_LAT_LNGRowChangeEvent(((T_IP_LAT_LNGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.T_IP_LAT_LNGRowDeleted != null)) {
                    this.T_IP_LAT_LNGRowDeleted(this, new T_IP_LAT_LNGRowChangeEvent(((T_IP_LAT_LNGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.T_IP_LAT_LNGRowDeleting != null)) {
                    this.T_IP_LAT_LNGRowDeleting(this, new T_IP_LAT_LNGRowChangeEvent(((T_IP_LAT_LNGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveT_IP_LAT_LNGRow(T_IP_LAT_LNGRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ApplicationHandler ds = new ApplicationHandler();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "T_IP_LAT_LNGDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class T_IP_LAT_LNG_ValidateDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnIPL_IP;
            
            private global::System.Data.DataColumn columnIPL_LAT;
            
            private global::System.Data.DataColumn columnIPL_LNG;
            
            private global::System.Data.DataColumn columnIPL_IIS_SERVER_ID;
            
            private global::System.Data.DataColumn columnIPL_BL_SERVER_ID;
            
            private global::System.Data.DataColumn columnIPL_VALIDATE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IP_LAT_LNG_ValidateDataTable() {
                this.TableName = "T_IP_LAT_LNG_Validate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal T_IP_LAT_LNG_ValidateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected T_IP_LAT_LNG_ValidateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IPL_IPColumn {
                get {
                    return this.columnIPL_IP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IPL_LATColumn {
                get {
                    return this.columnIPL_LAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IPL_LNGColumn {
                get {
                    return this.columnIPL_LNG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IPL_IIS_SERVER_IDColumn {
                get {
                    return this.columnIPL_IIS_SERVER_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IPL_BL_SERVER_IDColumn {
                get {
                    return this.columnIPL_BL_SERVER_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IPL_VALIDATEColumn {
                get {
                    return this.columnIPL_VALIDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IP_LAT_LNG_ValidateRow this[int index] {
                get {
                    return ((T_IP_LAT_LNG_ValidateRow)(this.Rows[index]));
                }
            }
            
            public event T_IP_LAT_LNG_ValidateRowChangeEventHandler T_IP_LAT_LNG_ValidateRowChanging;
            
            public event T_IP_LAT_LNG_ValidateRowChangeEventHandler T_IP_LAT_LNG_ValidateRowChanged;
            
            public event T_IP_LAT_LNG_ValidateRowChangeEventHandler T_IP_LAT_LNG_ValidateRowDeleting;
            
            public event T_IP_LAT_LNG_ValidateRowChangeEventHandler T_IP_LAT_LNG_ValidateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddT_IP_LAT_LNG_ValidateRow(T_IP_LAT_LNG_ValidateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IP_LAT_LNG_ValidateRow AddT_IP_LAT_LNG_ValidateRow(long IPL_IP, decimal IPL_LAT, decimal IPL_LNG, int IPL_IIS_SERVER_ID, int IPL_BL_SERVER_ID, bool IPL_VALIDATE) {
                T_IP_LAT_LNG_ValidateRow rowT_IP_LAT_LNG_ValidateRow = ((T_IP_LAT_LNG_ValidateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IPL_IP,
                        IPL_LAT,
                        IPL_LNG,
                        IPL_IIS_SERVER_ID,
                        IPL_BL_SERVER_ID,
                        IPL_VALIDATE};
                rowT_IP_LAT_LNG_ValidateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowT_IP_LAT_LNG_ValidateRow);
                return rowT_IP_LAT_LNG_ValidateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IP_LAT_LNG_ValidateRow FindByIPL_IP(long IPL_IP) {
                return ((T_IP_LAT_LNG_ValidateRow)(this.Rows.Find(new object[] {
                            IPL_IP})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                T_IP_LAT_LNG_ValidateDataTable cln = ((T_IP_LAT_LNG_ValidateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new T_IP_LAT_LNG_ValidateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIPL_IP = base.Columns["IPL_IP"];
                this.columnIPL_LAT = base.Columns["IPL_LAT"];
                this.columnIPL_LNG = base.Columns["IPL_LNG"];
                this.columnIPL_IIS_SERVER_ID = base.Columns["IPL_IIS_SERVER_ID"];
                this.columnIPL_BL_SERVER_ID = base.Columns["IPL_BL_SERVER_ID"];
                this.columnIPL_VALIDATE = base.Columns["IPL_VALIDATE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIPL_IP = new global::System.Data.DataColumn("IPL_IP", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIPL_IP);
                this.columnIPL_LAT = new global::System.Data.DataColumn("IPL_LAT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIPL_LAT);
                this.columnIPL_LNG = new global::System.Data.DataColumn("IPL_LNG", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIPL_LNG);
                this.columnIPL_IIS_SERVER_ID = new global::System.Data.DataColumn("IPL_IIS_SERVER_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIPL_IIS_SERVER_ID);
                this.columnIPL_BL_SERVER_ID = new global::System.Data.DataColumn("IPL_BL_SERVER_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIPL_BL_SERVER_ID);
                this.columnIPL_VALIDATE = new global::System.Data.DataColumn("IPL_VALIDATE", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIPL_VALIDATE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIPL_IP}, true));
                this.columnIPL_IP.AllowDBNull = false;
                this.columnIPL_IP.Unique = true;
                this.columnIPL_LAT.AllowDBNull = false;
                this.columnIPL_LNG.AllowDBNull = false;
                this.columnIPL_IIS_SERVER_ID.AllowDBNull = false;
                this.columnIPL_BL_SERVER_ID.AllowDBNull = false;
                this.columnIPL_VALIDATE.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IP_LAT_LNG_ValidateRow NewT_IP_LAT_LNG_ValidateRow() {
                return ((T_IP_LAT_LNG_ValidateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new T_IP_LAT_LNG_ValidateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(T_IP_LAT_LNG_ValidateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.T_IP_LAT_LNG_ValidateRowChanged != null)) {
                    this.T_IP_LAT_LNG_ValidateRowChanged(this, new T_IP_LAT_LNG_ValidateRowChangeEvent(((T_IP_LAT_LNG_ValidateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.T_IP_LAT_LNG_ValidateRowChanging != null)) {
                    this.T_IP_LAT_LNG_ValidateRowChanging(this, new T_IP_LAT_LNG_ValidateRowChangeEvent(((T_IP_LAT_LNG_ValidateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.T_IP_LAT_LNG_ValidateRowDeleted != null)) {
                    this.T_IP_LAT_LNG_ValidateRowDeleted(this, new T_IP_LAT_LNG_ValidateRowChangeEvent(((T_IP_LAT_LNG_ValidateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.T_IP_LAT_LNG_ValidateRowDeleting != null)) {
                    this.T_IP_LAT_LNG_ValidateRowDeleting(this, new T_IP_LAT_LNG_ValidateRowChangeEvent(((T_IP_LAT_LNG_ValidateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveT_IP_LAT_LNG_ValidateRow(T_IP_LAT_LNG_ValidateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ApplicationHandler ds = new ApplicationHandler();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "T_IP_LAT_LNG_ValidateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class T_REGISTERDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnREG_ID;
            
            private global::System.Data.DataColumn columnREG_DESCRIPTION;
            
            private global::System.Data.DataColumn columnREG_WEB_SITE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_REGISTERDataTable() {
                this.TableName = "T_REGISTER";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal T_REGISTERDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected T_REGISTERDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REG_IDColumn {
                get {
                    return this.columnREG_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REG_DESCRIPTIONColumn {
                get {
                    return this.columnREG_DESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REG_WEB_SITEColumn {
                get {
                    return this.columnREG_WEB_SITE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_REGISTERRow this[int index] {
                get {
                    return ((T_REGISTERRow)(this.Rows[index]));
                }
            }
            
            public event T_REGISTERRowChangeEventHandler T_REGISTERRowChanging;
            
            public event T_REGISTERRowChangeEventHandler T_REGISTERRowChanged;
            
            public event T_REGISTERRowChangeEventHandler T_REGISTERRowDeleting;
            
            public event T_REGISTERRowChangeEventHandler T_REGISTERRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddT_REGISTERRow(T_REGISTERRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_REGISTERRow AddT_REGISTERRow(string REG_DESCRIPTION, string REG_WEB_SITE) {
                T_REGISTERRow rowT_REGISTERRow = ((T_REGISTERRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        REG_DESCRIPTION,
                        REG_WEB_SITE};
                rowT_REGISTERRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowT_REGISTERRow);
                return rowT_REGISTERRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_REGISTERRow FindByREG_ID(int REG_ID) {
                return ((T_REGISTERRow)(this.Rows.Find(new object[] {
                            REG_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                T_REGISTERDataTable cln = ((T_REGISTERDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new T_REGISTERDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnREG_ID = base.Columns["REG_ID"];
                this.columnREG_DESCRIPTION = base.Columns["REG_DESCRIPTION"];
                this.columnREG_WEB_SITE = base.Columns["REG_WEB_SITE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnREG_ID = new global::System.Data.DataColumn("REG_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREG_ID);
                this.columnREG_DESCRIPTION = new global::System.Data.DataColumn("REG_DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREG_DESCRIPTION);
                this.columnREG_WEB_SITE = new global::System.Data.DataColumn("REG_WEB_SITE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREG_WEB_SITE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnREG_ID}, true));
                this.columnREG_ID.AutoIncrement = true;
                this.columnREG_ID.AllowDBNull = false;
                this.columnREG_ID.ReadOnly = true;
                this.columnREG_ID.Unique = true;
                this.columnREG_DESCRIPTION.MaxLength = 50;
                this.columnREG_WEB_SITE.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_REGISTERRow NewT_REGISTERRow() {
                return ((T_REGISTERRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new T_REGISTERRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(T_REGISTERRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.T_REGISTERRowChanged != null)) {
                    this.T_REGISTERRowChanged(this, new T_REGISTERRowChangeEvent(((T_REGISTERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.T_REGISTERRowChanging != null)) {
                    this.T_REGISTERRowChanging(this, new T_REGISTERRowChangeEvent(((T_REGISTERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.T_REGISTERRowDeleted != null)) {
                    this.T_REGISTERRowDeleted(this, new T_REGISTERRowChangeEvent(((T_REGISTERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.T_REGISTERRowDeleting != null)) {
                    this.T_REGISTERRowDeleting(this, new T_REGISTERRowChangeEvent(((T_REGISTERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveT_REGISTERRow(T_REGISTERRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ApplicationHandler ds = new ApplicationHandler();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "T_REGISTERDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class T_HOSTINGDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnHST_ID;
            
            private global::System.Data.DataColumn columnHST_DESCRIPTION;
            
            private global::System.Data.DataColumn columnHST_WEB_SITE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_HOSTINGDataTable() {
                this.TableName = "T_HOSTING";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal T_HOSTINGDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected T_HOSTINGDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HST_IDColumn {
                get {
                    return this.columnHST_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HST_DESCRIPTIONColumn {
                get {
                    return this.columnHST_DESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HST_WEB_SITEColumn {
                get {
                    return this.columnHST_WEB_SITE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_HOSTINGRow this[int index] {
                get {
                    return ((T_HOSTINGRow)(this.Rows[index]));
                }
            }
            
            public event T_HOSTINGRowChangeEventHandler T_HOSTINGRowChanging;
            
            public event T_HOSTINGRowChangeEventHandler T_HOSTINGRowChanged;
            
            public event T_HOSTINGRowChangeEventHandler T_HOSTINGRowDeleting;
            
            public event T_HOSTINGRowChangeEventHandler T_HOSTINGRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddT_HOSTINGRow(T_HOSTINGRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_HOSTINGRow AddT_HOSTINGRow(string HST_DESCRIPTION, string HST_WEB_SITE) {
                T_HOSTINGRow rowT_HOSTINGRow = ((T_HOSTINGRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        HST_DESCRIPTION,
                        HST_WEB_SITE};
                rowT_HOSTINGRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowT_HOSTINGRow);
                return rowT_HOSTINGRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_HOSTINGRow FindByHST_ID(int HST_ID) {
                return ((T_HOSTINGRow)(this.Rows.Find(new object[] {
                            HST_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                T_HOSTINGDataTable cln = ((T_HOSTINGDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new T_HOSTINGDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnHST_ID = base.Columns["HST_ID"];
                this.columnHST_DESCRIPTION = base.Columns["HST_DESCRIPTION"];
                this.columnHST_WEB_SITE = base.Columns["HST_WEB_SITE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnHST_ID = new global::System.Data.DataColumn("HST_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHST_ID);
                this.columnHST_DESCRIPTION = new global::System.Data.DataColumn("HST_DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHST_DESCRIPTION);
                this.columnHST_WEB_SITE = new global::System.Data.DataColumn("HST_WEB_SITE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHST_WEB_SITE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnHST_ID}, true));
                this.columnHST_ID.AutoIncrement = true;
                this.columnHST_ID.AllowDBNull = false;
                this.columnHST_ID.ReadOnly = true;
                this.columnHST_ID.Unique = true;
                this.columnHST_DESCRIPTION.AllowDBNull = false;
                this.columnHST_DESCRIPTION.MaxLength = 50;
                this.columnHST_WEB_SITE.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_HOSTINGRow NewT_HOSTINGRow() {
                return ((T_HOSTINGRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new T_HOSTINGRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(T_HOSTINGRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.T_HOSTINGRowChanged != null)) {
                    this.T_HOSTINGRowChanged(this, new T_HOSTINGRowChangeEvent(((T_HOSTINGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.T_HOSTINGRowChanging != null)) {
                    this.T_HOSTINGRowChanging(this, new T_HOSTINGRowChangeEvent(((T_HOSTINGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.T_HOSTINGRowDeleted != null)) {
                    this.T_HOSTINGRowDeleted(this, new T_HOSTINGRowChangeEvent(((T_HOSTINGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.T_HOSTINGRowDeleting != null)) {
                    this.T_HOSTINGRowDeleting(this, new T_HOSTINGRowChangeEvent(((T_HOSTINGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveT_HOSTINGRow(T_HOSTINGRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ApplicationHandler ds = new ApplicationHandler();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "T_HOSTINGDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PT_SERVERSelectBySRV_SERVER_TYPE_IISDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSRV_ID;
            
            private global::System.Data.DataColumn columnSRT_DESCRIPTION;
            
            private global::System.Data.DataColumn columnSRT_PIC_URL;
            
            private global::System.Data.DataColumn columnREG_DESCRIPTION;
            
            private global::System.Data.DataColumn columnREG_WEB_SITE;
            
            private global::System.Data.DataColumn columnSRV_REG_DNS;
            
            private global::System.Data.DataColumn columnSRV_REG_DNS_CONTROL_PANEL;
            
            private global::System.Data.DataColumn columnSRV_REG_SUB_DOMAIN_NAME;
            
            private global::System.Data.DataColumn columnHST_DESCRIPTION;
            
            private global::System.Data.DataColumn columnHST_WEB_SITE;
            
            private global::System.Data.DataColumn columnSRV_HOST_CONTROL_PANEL_1;
            
            private global::System.Data.DataColumn columnSRV_HOST_CONTROL_PANEL_2;
            
            private global::System.Data.DataColumn columnSRV_HOST_PDF;
            
            private global::System.Data.DataColumn columnSRV_HOST_LOCATION;
            
            private global::System.Data.DataColumn columnSRV_HOST_LAT;
            
            private global::System.Data.DataColumn columnSRV_HOST_LNG;
            
            private global::System.Data.DataColumn columnSRV_HOST_APP_POOL_URL;
            
            private global::System.Data.DataColumn columnSRV_DB_DNS;
            
            private global::System.Data.DataColumn columnSRV_DB_CONTROL_PANEL;
            
            private global::System.Data.DataColumn columnSRV_DB_NAME;
            
            private global::System.Data.DataColumn columnIP;
            
            private global::System.Data.DataColumn columnUsersCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_SERVERSelectBySRV_SERVER_TYPE_IISDataTable() {
                this.TableName = "PT_SERVERSelectBySRV_SERVER_TYPE_IIS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PT_SERVERSelectBySRV_SERVER_TYPE_IISDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PT_SERVERSelectBySRV_SERVER_TYPE_IISDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_IDColumn {
                get {
                    return this.columnSRV_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRT_DESCRIPTIONColumn {
                get {
                    return this.columnSRT_DESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRT_PIC_URLColumn {
                get {
                    return this.columnSRT_PIC_URL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REG_DESCRIPTIONColumn {
                get {
                    return this.columnREG_DESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REG_WEB_SITEColumn {
                get {
                    return this.columnREG_WEB_SITE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_REG_DNSColumn {
                get {
                    return this.columnSRV_REG_DNS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_REG_DNS_CONTROL_PANELColumn {
                get {
                    return this.columnSRV_REG_DNS_CONTROL_PANEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_REG_SUB_DOMAIN_NAMEColumn {
                get {
                    return this.columnSRV_REG_SUB_DOMAIN_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HST_DESCRIPTIONColumn {
                get {
                    return this.columnHST_DESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HST_WEB_SITEColumn {
                get {
                    return this.columnHST_WEB_SITE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_CONTROL_PANEL_1Column {
                get {
                    return this.columnSRV_HOST_CONTROL_PANEL_1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_CONTROL_PANEL_2Column {
                get {
                    return this.columnSRV_HOST_CONTROL_PANEL_2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_PDFColumn {
                get {
                    return this.columnSRV_HOST_PDF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_LOCATIONColumn {
                get {
                    return this.columnSRV_HOST_LOCATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_LATColumn {
                get {
                    return this.columnSRV_HOST_LAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_LNGColumn {
                get {
                    return this.columnSRV_HOST_LNG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_APP_POOL_URLColumn {
                get {
                    return this.columnSRV_HOST_APP_POOL_URL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_DB_DNSColumn {
                get {
                    return this.columnSRV_DB_DNS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_DB_CONTROL_PANELColumn {
                get {
                    return this.columnSRV_DB_CONTROL_PANEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_DB_NAMEColumn {
                get {
                    return this.columnSRV_DB_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IPColumn {
                get {
                    return this.columnIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsersCountColumn {
                get {
                    return this.columnUsersCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_SERVERSelectBySRV_SERVER_TYPE_IISRow this[int index] {
                get {
                    return ((PT_SERVERSelectBySRV_SERVER_TYPE_IISRow)(this.Rows[index]));
                }
            }
            
            public event PT_SERVERSelectBySRV_SERVER_TYPE_IISRowChangeEventHandler PT_SERVERSelectBySRV_SERVER_TYPE_IISRowChanging;
            
            public event PT_SERVERSelectBySRV_SERVER_TYPE_IISRowChangeEventHandler PT_SERVERSelectBySRV_SERVER_TYPE_IISRowChanged;
            
            public event PT_SERVERSelectBySRV_SERVER_TYPE_IISRowChangeEventHandler PT_SERVERSelectBySRV_SERVER_TYPE_IISRowDeleting;
            
            public event PT_SERVERSelectBySRV_SERVER_TYPE_IISRowChangeEventHandler PT_SERVERSelectBySRV_SERVER_TYPE_IISRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPT_SERVERSelectBySRV_SERVER_TYPE_IISRow(PT_SERVERSelectBySRV_SERVER_TYPE_IISRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_SERVERSelectBySRV_SERVER_TYPE_IISRow AddPT_SERVERSelectBySRV_SERVER_TYPE_IISRow(
                        string SRT_DESCRIPTION, 
                        string SRT_PIC_URL, 
                        string REG_DESCRIPTION, 
                        string REG_WEB_SITE, 
                        string SRV_REG_DNS, 
                        string SRV_REG_DNS_CONTROL_PANEL, 
                        string SRV_REG_SUB_DOMAIN_NAME, 
                        string HST_DESCRIPTION, 
                        string HST_WEB_SITE, 
                        string SRV_HOST_CONTROL_PANEL_1, 
                        string SRV_HOST_CONTROL_PANEL_2, 
                        string SRV_HOST_PDF, 
                        string SRV_HOST_LOCATION, 
                        decimal SRV_HOST_LAT, 
                        decimal SRV_HOST_LNG, 
                        string SRV_HOST_APP_POOL_URL, 
                        string SRV_DB_DNS, 
                        string SRV_DB_CONTROL_PANEL, 
                        string SRV_DB_NAME, 
                        string IP, 
                        string UsersCount) {
                PT_SERVERSelectBySRV_SERVER_TYPE_IISRow rowPT_SERVERSelectBySRV_SERVER_TYPE_IISRow = ((PT_SERVERSelectBySRV_SERVER_TYPE_IISRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        SRT_DESCRIPTION,
                        SRT_PIC_URL,
                        REG_DESCRIPTION,
                        REG_WEB_SITE,
                        SRV_REG_DNS,
                        SRV_REG_DNS_CONTROL_PANEL,
                        SRV_REG_SUB_DOMAIN_NAME,
                        HST_DESCRIPTION,
                        HST_WEB_SITE,
                        SRV_HOST_CONTROL_PANEL_1,
                        SRV_HOST_CONTROL_PANEL_2,
                        SRV_HOST_PDF,
                        SRV_HOST_LOCATION,
                        SRV_HOST_LAT,
                        SRV_HOST_LNG,
                        SRV_HOST_APP_POOL_URL,
                        SRV_DB_DNS,
                        SRV_DB_CONTROL_PANEL,
                        SRV_DB_NAME,
                        IP,
                        UsersCount};
                rowPT_SERVERSelectBySRV_SERVER_TYPE_IISRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPT_SERVERSelectBySRV_SERVER_TYPE_IISRow);
                return rowPT_SERVERSelectBySRV_SERVER_TYPE_IISRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_SERVERSelectBySRV_SERVER_TYPE_IISRow FindBySRV_ID(int SRV_ID) {
                return ((PT_SERVERSelectBySRV_SERVER_TYPE_IISRow)(this.Rows.Find(new object[] {
                            SRV_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PT_SERVERSelectBySRV_SERVER_TYPE_IISDataTable cln = ((PT_SERVERSelectBySRV_SERVER_TYPE_IISDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PT_SERVERSelectBySRV_SERVER_TYPE_IISDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSRV_ID = base.Columns["SRV_ID"];
                this.columnSRT_DESCRIPTION = base.Columns["SRT_DESCRIPTION"];
                this.columnSRT_PIC_URL = base.Columns["SRT_PIC_URL"];
                this.columnREG_DESCRIPTION = base.Columns["REG_DESCRIPTION"];
                this.columnREG_WEB_SITE = base.Columns["REG_WEB_SITE"];
                this.columnSRV_REG_DNS = base.Columns["SRV_REG_DNS"];
                this.columnSRV_REG_DNS_CONTROL_PANEL = base.Columns["SRV_REG_DNS_CONTROL_PANEL"];
                this.columnSRV_REG_SUB_DOMAIN_NAME = base.Columns["SRV_REG_SUB_DOMAIN_NAME"];
                this.columnHST_DESCRIPTION = base.Columns["HST_DESCRIPTION"];
                this.columnHST_WEB_SITE = base.Columns["HST_WEB_SITE"];
                this.columnSRV_HOST_CONTROL_PANEL_1 = base.Columns["SRV_HOST_CONTROL_PANEL_1"];
                this.columnSRV_HOST_CONTROL_PANEL_2 = base.Columns["SRV_HOST_CONTROL_PANEL_2"];
                this.columnSRV_HOST_PDF = base.Columns["SRV_HOST_PDF"];
                this.columnSRV_HOST_LOCATION = base.Columns["SRV_HOST_LOCATION"];
                this.columnSRV_HOST_LAT = base.Columns["SRV_HOST_LAT"];
                this.columnSRV_HOST_LNG = base.Columns["SRV_HOST_LNG"];
                this.columnSRV_HOST_APP_POOL_URL = base.Columns["SRV_HOST_APP_POOL_URL"];
                this.columnSRV_DB_DNS = base.Columns["SRV_DB_DNS"];
                this.columnSRV_DB_CONTROL_PANEL = base.Columns["SRV_DB_CONTROL_PANEL"];
                this.columnSRV_DB_NAME = base.Columns["SRV_DB_NAME"];
                this.columnIP = base.Columns["IP"];
                this.columnUsersCount = base.Columns["UsersCount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSRV_ID = new global::System.Data.DataColumn("SRV_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_ID);
                this.columnSRT_DESCRIPTION = new global::System.Data.DataColumn("SRT_DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRT_DESCRIPTION);
                this.columnSRT_PIC_URL = new global::System.Data.DataColumn("SRT_PIC_URL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRT_PIC_URL);
                this.columnREG_DESCRIPTION = new global::System.Data.DataColumn("REG_DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREG_DESCRIPTION);
                this.columnREG_WEB_SITE = new global::System.Data.DataColumn("REG_WEB_SITE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREG_WEB_SITE);
                this.columnSRV_REG_DNS = new global::System.Data.DataColumn("SRV_REG_DNS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_REG_DNS);
                this.columnSRV_REG_DNS_CONTROL_PANEL = new global::System.Data.DataColumn("SRV_REG_DNS_CONTROL_PANEL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_REG_DNS_CONTROL_PANEL);
                this.columnSRV_REG_SUB_DOMAIN_NAME = new global::System.Data.DataColumn("SRV_REG_SUB_DOMAIN_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_REG_SUB_DOMAIN_NAME);
                this.columnHST_DESCRIPTION = new global::System.Data.DataColumn("HST_DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHST_DESCRIPTION);
                this.columnHST_WEB_SITE = new global::System.Data.DataColumn("HST_WEB_SITE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHST_WEB_SITE);
                this.columnSRV_HOST_CONTROL_PANEL_1 = new global::System.Data.DataColumn("SRV_HOST_CONTROL_PANEL_1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_CONTROL_PANEL_1);
                this.columnSRV_HOST_CONTROL_PANEL_2 = new global::System.Data.DataColumn("SRV_HOST_CONTROL_PANEL_2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_CONTROL_PANEL_2);
                this.columnSRV_HOST_PDF = new global::System.Data.DataColumn("SRV_HOST_PDF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_PDF);
                this.columnSRV_HOST_LOCATION = new global::System.Data.DataColumn("SRV_HOST_LOCATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_LOCATION);
                this.columnSRV_HOST_LAT = new global::System.Data.DataColumn("SRV_HOST_LAT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_LAT);
                this.columnSRV_HOST_LNG = new global::System.Data.DataColumn("SRV_HOST_LNG", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_LNG);
                this.columnSRV_HOST_APP_POOL_URL = new global::System.Data.DataColumn("SRV_HOST_APP_POOL_URL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_APP_POOL_URL);
                this.columnSRV_DB_DNS = new global::System.Data.DataColumn("SRV_DB_DNS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_DB_DNS);
                this.columnSRV_DB_CONTROL_PANEL = new global::System.Data.DataColumn("SRV_DB_CONTROL_PANEL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_DB_CONTROL_PANEL);
                this.columnSRV_DB_NAME = new global::System.Data.DataColumn("SRV_DB_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_DB_NAME);
                this.columnIP = new global::System.Data.DataColumn("IP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIP);
                this.columnUsersCount = new global::System.Data.DataColumn("UsersCount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsersCount);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSRV_ID}, true));
                this.columnSRV_ID.AutoIncrement = true;
                this.columnSRV_ID.AllowDBNull = false;
                this.columnSRV_ID.ReadOnly = true;
                this.columnSRV_ID.Unique = true;
                this.columnSRT_DESCRIPTION.AllowDBNull = false;
                this.columnSRT_DESCRIPTION.MaxLength = 50;
                this.columnSRT_PIC_URL.AllowDBNull = false;
                this.columnSRT_PIC_URL.MaxLength = 255;
                this.columnREG_DESCRIPTION.MaxLength = 50;
                this.columnREG_WEB_SITE.MaxLength = 50;
                this.columnSRV_REG_DNS.AllowDBNull = false;
                this.columnSRV_REG_DNS.MaxLength = 255;
                this.columnSRV_REG_DNS_CONTROL_PANEL.AllowDBNull = false;
                this.columnSRV_REG_DNS_CONTROL_PANEL.MaxLength = 255;
                this.columnSRV_REG_SUB_DOMAIN_NAME.AllowDBNull = false;
                this.columnSRV_REG_SUB_DOMAIN_NAME.MaxLength = 255;
                this.columnHST_DESCRIPTION.AllowDBNull = false;
                this.columnHST_DESCRIPTION.MaxLength = 50;
                this.columnHST_WEB_SITE.MaxLength = 255;
                this.columnSRV_HOST_CONTROL_PANEL_1.MaxLength = 255;
                this.columnSRV_HOST_CONTROL_PANEL_2.MaxLength = 255;
                this.columnSRV_HOST_PDF.MaxLength = 50;
                this.columnSRV_HOST_LOCATION.MaxLength = 255;
                this.columnSRV_HOST_LAT.AllowDBNull = false;
                this.columnSRV_HOST_LNG.AllowDBNull = false;
                this.columnSRV_HOST_APP_POOL_URL.MaxLength = 255;
                this.columnSRV_DB_DNS.MaxLength = 255;
                this.columnSRV_DB_CONTROL_PANEL.MaxLength = 255;
                this.columnSRV_DB_NAME.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_SERVERSelectBySRV_SERVER_TYPE_IISRow NewPT_SERVERSelectBySRV_SERVER_TYPE_IISRow() {
                return ((PT_SERVERSelectBySRV_SERVER_TYPE_IISRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PT_SERVERSelectBySRV_SERVER_TYPE_IISRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PT_SERVERSelectBySRV_SERVER_TYPE_IISRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PT_SERVERSelectBySRV_SERVER_TYPE_IISRowChanged != null)) {
                    this.PT_SERVERSelectBySRV_SERVER_TYPE_IISRowChanged(this, new PT_SERVERSelectBySRV_SERVER_TYPE_IISRowChangeEvent(((PT_SERVERSelectBySRV_SERVER_TYPE_IISRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PT_SERVERSelectBySRV_SERVER_TYPE_IISRowChanging != null)) {
                    this.PT_SERVERSelectBySRV_SERVER_TYPE_IISRowChanging(this, new PT_SERVERSelectBySRV_SERVER_TYPE_IISRowChangeEvent(((PT_SERVERSelectBySRV_SERVER_TYPE_IISRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PT_SERVERSelectBySRV_SERVER_TYPE_IISRowDeleted != null)) {
                    this.PT_SERVERSelectBySRV_SERVER_TYPE_IISRowDeleted(this, new PT_SERVERSelectBySRV_SERVER_TYPE_IISRowChangeEvent(((PT_SERVERSelectBySRV_SERVER_TYPE_IISRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PT_SERVERSelectBySRV_SERVER_TYPE_IISRowDeleting != null)) {
                    this.PT_SERVERSelectBySRV_SERVER_TYPE_IISRowDeleting(this, new PT_SERVERSelectBySRV_SERVER_TYPE_IISRowChangeEvent(((PT_SERVERSelectBySRV_SERVER_TYPE_IISRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePT_SERVERSelectBySRV_SERVER_TYPE_IISRow(PT_SERVERSelectBySRV_SERVER_TYPE_IISRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ApplicationHandler ds = new ApplicationHandler();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PT_SERVERSelectBySRV_SERVER_TYPE_IISDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PT_SERVERSelectBySRV_SERVER_TYPE_BLDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSRV_ID;
            
            private global::System.Data.DataColumn columnSRT_DESCRIPTION;
            
            private global::System.Data.DataColumn columnSRT_PIC_URL;
            
            private global::System.Data.DataColumn columnREG_DESCRIPTION;
            
            private global::System.Data.DataColumn columnREG_WEB_SITE;
            
            private global::System.Data.DataColumn columnSRV_REG_DNS;
            
            private global::System.Data.DataColumn columnSRV_REG_DNS_CONTROL_PANEL;
            
            private global::System.Data.DataColumn columnSRV_REG_SUB_DOMAIN_NAME;
            
            private global::System.Data.DataColumn columnHST_DESCRIPTION;
            
            private global::System.Data.DataColumn columnHST_WEB_SITE;
            
            private global::System.Data.DataColumn columnSRV_HOST_CONTROL_PANEL_1;
            
            private global::System.Data.DataColumn columnSRV_HOST_CONTROL_PANEL_2;
            
            private global::System.Data.DataColumn columnSRV_HOST_PDF;
            
            private global::System.Data.DataColumn columnSRV_HOST_LOCATION;
            
            private global::System.Data.DataColumn columnSRV_HOST_LAT;
            
            private global::System.Data.DataColumn columnSRV_HOST_LNG;
            
            private global::System.Data.DataColumn columnSRV_HOST_APP_POOL_URL;
            
            private global::System.Data.DataColumn columnSRV_DB_DNS;
            
            private global::System.Data.DataColumn columnSRV_DB_CONTROL_PANEL;
            
            private global::System.Data.DataColumn columnSRV_DB_NAME;
            
            private global::System.Data.DataColumn columnIP;
            
            private global::System.Data.DataColumn columnUsersCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_SERVERSelectBySRV_SERVER_TYPE_BLDataTable() {
                this.TableName = "PT_SERVERSelectBySRV_SERVER_TYPE_BL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PT_SERVERSelectBySRV_SERVER_TYPE_BLDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PT_SERVERSelectBySRV_SERVER_TYPE_BLDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_IDColumn {
                get {
                    return this.columnSRV_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRT_DESCRIPTIONColumn {
                get {
                    return this.columnSRT_DESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRT_PIC_URLColumn {
                get {
                    return this.columnSRT_PIC_URL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REG_DESCRIPTIONColumn {
                get {
                    return this.columnREG_DESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REG_WEB_SITEColumn {
                get {
                    return this.columnREG_WEB_SITE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_REG_DNSColumn {
                get {
                    return this.columnSRV_REG_DNS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_REG_DNS_CONTROL_PANELColumn {
                get {
                    return this.columnSRV_REG_DNS_CONTROL_PANEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_REG_SUB_DOMAIN_NAMEColumn {
                get {
                    return this.columnSRV_REG_SUB_DOMAIN_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HST_DESCRIPTIONColumn {
                get {
                    return this.columnHST_DESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HST_WEB_SITEColumn {
                get {
                    return this.columnHST_WEB_SITE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_CONTROL_PANEL_1Column {
                get {
                    return this.columnSRV_HOST_CONTROL_PANEL_1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_CONTROL_PANEL_2Column {
                get {
                    return this.columnSRV_HOST_CONTROL_PANEL_2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_PDFColumn {
                get {
                    return this.columnSRV_HOST_PDF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_LOCATIONColumn {
                get {
                    return this.columnSRV_HOST_LOCATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_LATColumn {
                get {
                    return this.columnSRV_HOST_LAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_LNGColumn {
                get {
                    return this.columnSRV_HOST_LNG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_APP_POOL_URLColumn {
                get {
                    return this.columnSRV_HOST_APP_POOL_URL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_DB_DNSColumn {
                get {
                    return this.columnSRV_DB_DNS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_DB_CONTROL_PANELColumn {
                get {
                    return this.columnSRV_DB_CONTROL_PANEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_DB_NAMEColumn {
                get {
                    return this.columnSRV_DB_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IPColumn {
                get {
                    return this.columnIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsersCountColumn {
                get {
                    return this.columnUsersCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_SERVERSelectBySRV_SERVER_TYPE_BLRow this[int index] {
                get {
                    return ((PT_SERVERSelectBySRV_SERVER_TYPE_BLRow)(this.Rows[index]));
                }
            }
            
            public event PT_SERVERSelectBySRV_SERVER_TYPE_BLRowChangeEventHandler PT_SERVERSelectBySRV_SERVER_TYPE_BLRowChanging;
            
            public event PT_SERVERSelectBySRV_SERVER_TYPE_BLRowChangeEventHandler PT_SERVERSelectBySRV_SERVER_TYPE_BLRowChanged;
            
            public event PT_SERVERSelectBySRV_SERVER_TYPE_BLRowChangeEventHandler PT_SERVERSelectBySRV_SERVER_TYPE_BLRowDeleting;
            
            public event PT_SERVERSelectBySRV_SERVER_TYPE_BLRowChangeEventHandler PT_SERVERSelectBySRV_SERVER_TYPE_BLRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPT_SERVERSelectBySRV_SERVER_TYPE_BLRow(PT_SERVERSelectBySRV_SERVER_TYPE_BLRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_SERVERSelectBySRV_SERVER_TYPE_BLRow AddPT_SERVERSelectBySRV_SERVER_TYPE_BLRow(
                        string SRT_DESCRIPTION, 
                        string SRT_PIC_URL, 
                        string REG_DESCRIPTION, 
                        string REG_WEB_SITE, 
                        string SRV_REG_DNS, 
                        string SRV_REG_DNS_CONTROL_PANEL, 
                        string SRV_REG_SUB_DOMAIN_NAME, 
                        string HST_DESCRIPTION, 
                        string HST_WEB_SITE, 
                        string SRV_HOST_CONTROL_PANEL_1, 
                        string SRV_HOST_CONTROL_PANEL_2, 
                        string SRV_HOST_PDF, 
                        string SRV_HOST_LOCATION, 
                        decimal SRV_HOST_LAT, 
                        decimal SRV_HOST_LNG, 
                        string SRV_HOST_APP_POOL_URL, 
                        string SRV_DB_DNS, 
                        string SRV_DB_CONTROL_PANEL, 
                        string SRV_DB_NAME, 
                        string IP, 
                        string UsersCount) {
                PT_SERVERSelectBySRV_SERVER_TYPE_BLRow rowPT_SERVERSelectBySRV_SERVER_TYPE_BLRow = ((PT_SERVERSelectBySRV_SERVER_TYPE_BLRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        SRT_DESCRIPTION,
                        SRT_PIC_URL,
                        REG_DESCRIPTION,
                        REG_WEB_SITE,
                        SRV_REG_DNS,
                        SRV_REG_DNS_CONTROL_PANEL,
                        SRV_REG_SUB_DOMAIN_NAME,
                        HST_DESCRIPTION,
                        HST_WEB_SITE,
                        SRV_HOST_CONTROL_PANEL_1,
                        SRV_HOST_CONTROL_PANEL_2,
                        SRV_HOST_PDF,
                        SRV_HOST_LOCATION,
                        SRV_HOST_LAT,
                        SRV_HOST_LNG,
                        SRV_HOST_APP_POOL_URL,
                        SRV_DB_DNS,
                        SRV_DB_CONTROL_PANEL,
                        SRV_DB_NAME,
                        IP,
                        UsersCount};
                rowPT_SERVERSelectBySRV_SERVER_TYPE_BLRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPT_SERVERSelectBySRV_SERVER_TYPE_BLRow);
                return rowPT_SERVERSelectBySRV_SERVER_TYPE_BLRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_SERVERSelectBySRV_SERVER_TYPE_BLRow FindBySRV_ID(int SRV_ID) {
                return ((PT_SERVERSelectBySRV_SERVER_TYPE_BLRow)(this.Rows.Find(new object[] {
                            SRV_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PT_SERVERSelectBySRV_SERVER_TYPE_BLDataTable cln = ((PT_SERVERSelectBySRV_SERVER_TYPE_BLDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PT_SERVERSelectBySRV_SERVER_TYPE_BLDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSRV_ID = base.Columns["SRV_ID"];
                this.columnSRT_DESCRIPTION = base.Columns["SRT_DESCRIPTION"];
                this.columnSRT_PIC_URL = base.Columns["SRT_PIC_URL"];
                this.columnREG_DESCRIPTION = base.Columns["REG_DESCRIPTION"];
                this.columnREG_WEB_SITE = base.Columns["REG_WEB_SITE"];
                this.columnSRV_REG_DNS = base.Columns["SRV_REG_DNS"];
                this.columnSRV_REG_DNS_CONTROL_PANEL = base.Columns["SRV_REG_DNS_CONTROL_PANEL"];
                this.columnSRV_REG_SUB_DOMAIN_NAME = base.Columns["SRV_REG_SUB_DOMAIN_NAME"];
                this.columnHST_DESCRIPTION = base.Columns["HST_DESCRIPTION"];
                this.columnHST_WEB_SITE = base.Columns["HST_WEB_SITE"];
                this.columnSRV_HOST_CONTROL_PANEL_1 = base.Columns["SRV_HOST_CONTROL_PANEL_1"];
                this.columnSRV_HOST_CONTROL_PANEL_2 = base.Columns["SRV_HOST_CONTROL_PANEL_2"];
                this.columnSRV_HOST_PDF = base.Columns["SRV_HOST_PDF"];
                this.columnSRV_HOST_LOCATION = base.Columns["SRV_HOST_LOCATION"];
                this.columnSRV_HOST_LAT = base.Columns["SRV_HOST_LAT"];
                this.columnSRV_HOST_LNG = base.Columns["SRV_HOST_LNG"];
                this.columnSRV_HOST_APP_POOL_URL = base.Columns["SRV_HOST_APP_POOL_URL"];
                this.columnSRV_DB_DNS = base.Columns["SRV_DB_DNS"];
                this.columnSRV_DB_CONTROL_PANEL = base.Columns["SRV_DB_CONTROL_PANEL"];
                this.columnSRV_DB_NAME = base.Columns["SRV_DB_NAME"];
                this.columnIP = base.Columns["IP"];
                this.columnUsersCount = base.Columns["UsersCount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSRV_ID = new global::System.Data.DataColumn("SRV_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_ID);
                this.columnSRT_DESCRIPTION = new global::System.Data.DataColumn("SRT_DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRT_DESCRIPTION);
                this.columnSRT_PIC_URL = new global::System.Data.DataColumn("SRT_PIC_URL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRT_PIC_URL);
                this.columnREG_DESCRIPTION = new global::System.Data.DataColumn("REG_DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREG_DESCRIPTION);
                this.columnREG_WEB_SITE = new global::System.Data.DataColumn("REG_WEB_SITE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREG_WEB_SITE);
                this.columnSRV_REG_DNS = new global::System.Data.DataColumn("SRV_REG_DNS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_REG_DNS);
                this.columnSRV_REG_DNS_CONTROL_PANEL = new global::System.Data.DataColumn("SRV_REG_DNS_CONTROL_PANEL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_REG_DNS_CONTROL_PANEL);
                this.columnSRV_REG_SUB_DOMAIN_NAME = new global::System.Data.DataColumn("SRV_REG_SUB_DOMAIN_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_REG_SUB_DOMAIN_NAME);
                this.columnHST_DESCRIPTION = new global::System.Data.DataColumn("HST_DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHST_DESCRIPTION);
                this.columnHST_WEB_SITE = new global::System.Data.DataColumn("HST_WEB_SITE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHST_WEB_SITE);
                this.columnSRV_HOST_CONTROL_PANEL_1 = new global::System.Data.DataColumn("SRV_HOST_CONTROL_PANEL_1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_CONTROL_PANEL_1);
                this.columnSRV_HOST_CONTROL_PANEL_2 = new global::System.Data.DataColumn("SRV_HOST_CONTROL_PANEL_2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_CONTROL_PANEL_2);
                this.columnSRV_HOST_PDF = new global::System.Data.DataColumn("SRV_HOST_PDF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_PDF);
                this.columnSRV_HOST_LOCATION = new global::System.Data.DataColumn("SRV_HOST_LOCATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_LOCATION);
                this.columnSRV_HOST_LAT = new global::System.Data.DataColumn("SRV_HOST_LAT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_LAT);
                this.columnSRV_HOST_LNG = new global::System.Data.DataColumn("SRV_HOST_LNG", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_LNG);
                this.columnSRV_HOST_APP_POOL_URL = new global::System.Data.DataColumn("SRV_HOST_APP_POOL_URL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_APP_POOL_URL);
                this.columnSRV_DB_DNS = new global::System.Data.DataColumn("SRV_DB_DNS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_DB_DNS);
                this.columnSRV_DB_CONTROL_PANEL = new global::System.Data.DataColumn("SRV_DB_CONTROL_PANEL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_DB_CONTROL_PANEL);
                this.columnSRV_DB_NAME = new global::System.Data.DataColumn("SRV_DB_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_DB_NAME);
                this.columnIP = new global::System.Data.DataColumn("IP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIP);
                this.columnUsersCount = new global::System.Data.DataColumn("UsersCount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsersCount);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSRV_ID}, true));
                this.columnSRV_ID.AutoIncrement = true;
                this.columnSRV_ID.AllowDBNull = false;
                this.columnSRV_ID.ReadOnly = true;
                this.columnSRV_ID.Unique = true;
                this.columnSRT_DESCRIPTION.AllowDBNull = false;
                this.columnSRT_DESCRIPTION.MaxLength = 50;
                this.columnSRT_PIC_URL.AllowDBNull = false;
                this.columnSRT_PIC_URL.MaxLength = 255;
                this.columnREG_DESCRIPTION.MaxLength = 50;
                this.columnREG_WEB_SITE.MaxLength = 50;
                this.columnSRV_REG_DNS.AllowDBNull = false;
                this.columnSRV_REG_DNS.MaxLength = 255;
                this.columnSRV_REG_DNS_CONTROL_PANEL.AllowDBNull = false;
                this.columnSRV_REG_DNS_CONTROL_PANEL.MaxLength = 255;
                this.columnSRV_REG_SUB_DOMAIN_NAME.AllowDBNull = false;
                this.columnSRV_REG_SUB_DOMAIN_NAME.MaxLength = 255;
                this.columnHST_DESCRIPTION.AllowDBNull = false;
                this.columnHST_DESCRIPTION.MaxLength = 50;
                this.columnHST_WEB_SITE.MaxLength = 255;
                this.columnSRV_HOST_CONTROL_PANEL_1.MaxLength = 255;
                this.columnSRV_HOST_CONTROL_PANEL_2.MaxLength = 255;
                this.columnSRV_HOST_PDF.MaxLength = 50;
                this.columnSRV_HOST_LOCATION.MaxLength = 255;
                this.columnSRV_HOST_LAT.AllowDBNull = false;
                this.columnSRV_HOST_LNG.AllowDBNull = false;
                this.columnSRV_HOST_APP_POOL_URL.MaxLength = 255;
                this.columnSRV_DB_DNS.MaxLength = 255;
                this.columnSRV_DB_CONTROL_PANEL.MaxLength = 255;
                this.columnSRV_DB_NAME.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_SERVERSelectBySRV_SERVER_TYPE_BLRow NewPT_SERVERSelectBySRV_SERVER_TYPE_BLRow() {
                return ((PT_SERVERSelectBySRV_SERVER_TYPE_BLRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PT_SERVERSelectBySRV_SERVER_TYPE_BLRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PT_SERVERSelectBySRV_SERVER_TYPE_BLRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PT_SERVERSelectBySRV_SERVER_TYPE_BLRowChanged != null)) {
                    this.PT_SERVERSelectBySRV_SERVER_TYPE_BLRowChanged(this, new PT_SERVERSelectBySRV_SERVER_TYPE_BLRowChangeEvent(((PT_SERVERSelectBySRV_SERVER_TYPE_BLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PT_SERVERSelectBySRV_SERVER_TYPE_BLRowChanging != null)) {
                    this.PT_SERVERSelectBySRV_SERVER_TYPE_BLRowChanging(this, new PT_SERVERSelectBySRV_SERVER_TYPE_BLRowChangeEvent(((PT_SERVERSelectBySRV_SERVER_TYPE_BLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PT_SERVERSelectBySRV_SERVER_TYPE_BLRowDeleted != null)) {
                    this.PT_SERVERSelectBySRV_SERVER_TYPE_BLRowDeleted(this, new PT_SERVERSelectBySRV_SERVER_TYPE_BLRowChangeEvent(((PT_SERVERSelectBySRV_SERVER_TYPE_BLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PT_SERVERSelectBySRV_SERVER_TYPE_BLRowDeleting != null)) {
                    this.PT_SERVERSelectBySRV_SERVER_TYPE_BLRowDeleting(this, new PT_SERVERSelectBySRV_SERVER_TYPE_BLRowChangeEvent(((PT_SERVERSelectBySRV_SERVER_TYPE_BLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePT_SERVERSelectBySRV_SERVER_TYPE_BLRow(PT_SERVERSelectBySRV_SERVER_TYPE_BLRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ApplicationHandler ds = new ApplicationHandler();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PT_SERVERSelectBySRV_SERVER_TYPE_BLDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class T_SERVERDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSRV_ID;
            
            private global::System.Data.DataColumn columnSRV_SERVER_TYPE;
            
            private global::System.Data.DataColumn columnSRV_IS_SSL;
            
            private global::System.Data.DataColumn columnSRV_REG_CODE;
            
            private global::System.Data.DataColumn columnSRV_REG_DNS;
            
            private global::System.Data.DataColumn columnSRV_REG_DNS_COST;
            
            private global::System.Data.DataColumn columnSRV_REG_DNS_CONTROL_PANEL;
            
            private global::System.Data.DataColumn columnSRV_REG_SUB_DOMAIN_NAME;
            
            private global::System.Data.DataColumn columnSRV_HOST_CODE;
            
            private global::System.Data.DataColumn columnSRV_HOST_COST;
            
            private global::System.Data.DataColumn columnSRV_HOST_CONTROL_PANEL_1;
            
            private global::System.Data.DataColumn columnSRV_HOST_CONTROL_PANEL_2;
            
            private global::System.Data.DataColumn columnSRV_HOST_PDF;
            
            private global::System.Data.DataColumn columnSRV_HOST_LOCATION;
            
            private global::System.Data.DataColumn columnSRV_HOST_LAT;
            
            private global::System.Data.DataColumn columnSRV_HOST_LNG;
            
            private global::System.Data.DataColumn columnSRV_HOST_APP_POOL_URL;
            
            private global::System.Data.DataColumn columnSRV_DB_COST;
            
            private global::System.Data.DataColumn columnSRV_DB_CONTROL_PANEL;
            
            private global::System.Data.DataColumn columnSRV_DB_DNS;
            
            private global::System.Data.DataColumn columnSRV_DB_NAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_SERVERDataTable() {
                this.TableName = "T_SERVER";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal T_SERVERDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected T_SERVERDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_IDColumn {
                get {
                    return this.columnSRV_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_SERVER_TYPEColumn {
                get {
                    return this.columnSRV_SERVER_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_IS_SSLColumn {
                get {
                    return this.columnSRV_IS_SSL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_REG_CODEColumn {
                get {
                    return this.columnSRV_REG_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_REG_DNSColumn {
                get {
                    return this.columnSRV_REG_DNS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_REG_DNS_COSTColumn {
                get {
                    return this.columnSRV_REG_DNS_COST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_REG_DNS_CONTROL_PANELColumn {
                get {
                    return this.columnSRV_REG_DNS_CONTROL_PANEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_REG_SUB_DOMAIN_NAMEColumn {
                get {
                    return this.columnSRV_REG_SUB_DOMAIN_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_CODEColumn {
                get {
                    return this.columnSRV_HOST_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_COSTColumn {
                get {
                    return this.columnSRV_HOST_COST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_CONTROL_PANEL_1Column {
                get {
                    return this.columnSRV_HOST_CONTROL_PANEL_1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_CONTROL_PANEL_2Column {
                get {
                    return this.columnSRV_HOST_CONTROL_PANEL_2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_PDFColumn {
                get {
                    return this.columnSRV_HOST_PDF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_LOCATIONColumn {
                get {
                    return this.columnSRV_HOST_LOCATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_LATColumn {
                get {
                    return this.columnSRV_HOST_LAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_LNGColumn {
                get {
                    return this.columnSRV_HOST_LNG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_APP_POOL_URLColumn {
                get {
                    return this.columnSRV_HOST_APP_POOL_URL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_DB_COSTColumn {
                get {
                    return this.columnSRV_DB_COST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_DB_CONTROL_PANELColumn {
                get {
                    return this.columnSRV_DB_CONTROL_PANEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_DB_DNSColumn {
                get {
                    return this.columnSRV_DB_DNS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_DB_NAMEColumn {
                get {
                    return this.columnSRV_DB_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_SERVERRow this[int index] {
                get {
                    return ((T_SERVERRow)(this.Rows[index]));
                }
            }
            
            public event T_SERVERRowChangeEventHandler T_SERVERRowChanging;
            
            public event T_SERVERRowChangeEventHandler T_SERVERRowChanged;
            
            public event T_SERVERRowChangeEventHandler T_SERVERRowDeleting;
            
            public event T_SERVERRowChangeEventHandler T_SERVERRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddT_SERVERRow(T_SERVERRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_SERVERRow AddT_SERVERRow(
                        int SRV_SERVER_TYPE, 
                        bool SRV_IS_SSL, 
                        int SRV_REG_CODE, 
                        string SRV_REG_DNS, 
                        string SRV_REG_DNS_COST, 
                        string SRV_REG_DNS_CONTROL_PANEL, 
                        string SRV_REG_SUB_DOMAIN_NAME, 
                        int SRV_HOST_CODE, 
                        string SRV_HOST_COST, 
                        string SRV_HOST_CONTROL_PANEL_1, 
                        string SRV_HOST_CONTROL_PANEL_2, 
                        string SRV_HOST_PDF, 
                        string SRV_HOST_LOCATION, 
                        decimal SRV_HOST_LAT, 
                        decimal SRV_HOST_LNG, 
                        string SRV_HOST_APP_POOL_URL, 
                        string SRV_DB_COST, 
                        string SRV_DB_CONTROL_PANEL, 
                        string SRV_DB_DNS, 
                        string SRV_DB_NAME) {
                T_SERVERRow rowT_SERVERRow = ((T_SERVERRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        SRV_SERVER_TYPE,
                        SRV_IS_SSL,
                        SRV_REG_CODE,
                        SRV_REG_DNS,
                        SRV_REG_DNS_COST,
                        SRV_REG_DNS_CONTROL_PANEL,
                        SRV_REG_SUB_DOMAIN_NAME,
                        SRV_HOST_CODE,
                        SRV_HOST_COST,
                        SRV_HOST_CONTROL_PANEL_1,
                        SRV_HOST_CONTROL_PANEL_2,
                        SRV_HOST_PDF,
                        SRV_HOST_LOCATION,
                        SRV_HOST_LAT,
                        SRV_HOST_LNG,
                        SRV_HOST_APP_POOL_URL,
                        SRV_DB_COST,
                        SRV_DB_CONTROL_PANEL,
                        SRV_DB_DNS,
                        SRV_DB_NAME};
                rowT_SERVERRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowT_SERVERRow);
                return rowT_SERVERRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_SERVERRow FindBySRV_ID(int SRV_ID) {
                return ((T_SERVERRow)(this.Rows.Find(new object[] {
                            SRV_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                T_SERVERDataTable cln = ((T_SERVERDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new T_SERVERDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSRV_ID = base.Columns["SRV_ID"];
                this.columnSRV_SERVER_TYPE = base.Columns["SRV_SERVER_TYPE"];
                this.columnSRV_IS_SSL = base.Columns["SRV_IS_SSL"];
                this.columnSRV_REG_CODE = base.Columns["SRV_REG_CODE"];
                this.columnSRV_REG_DNS = base.Columns["SRV_REG_DNS"];
                this.columnSRV_REG_DNS_COST = base.Columns["SRV_REG_DNS_COST"];
                this.columnSRV_REG_DNS_CONTROL_PANEL = base.Columns["SRV_REG_DNS_CONTROL_PANEL"];
                this.columnSRV_REG_SUB_DOMAIN_NAME = base.Columns["SRV_REG_SUB_DOMAIN_NAME"];
                this.columnSRV_HOST_CODE = base.Columns["SRV_HOST_CODE"];
                this.columnSRV_HOST_COST = base.Columns["SRV_HOST_COST"];
                this.columnSRV_HOST_CONTROL_PANEL_1 = base.Columns["SRV_HOST_CONTROL_PANEL_1"];
                this.columnSRV_HOST_CONTROL_PANEL_2 = base.Columns["SRV_HOST_CONTROL_PANEL_2"];
                this.columnSRV_HOST_PDF = base.Columns["SRV_HOST_PDF"];
                this.columnSRV_HOST_LOCATION = base.Columns["SRV_HOST_LOCATION"];
                this.columnSRV_HOST_LAT = base.Columns["SRV_HOST_LAT"];
                this.columnSRV_HOST_LNG = base.Columns["SRV_HOST_LNG"];
                this.columnSRV_HOST_APP_POOL_URL = base.Columns["SRV_HOST_APP_POOL_URL"];
                this.columnSRV_DB_COST = base.Columns["SRV_DB_COST"];
                this.columnSRV_DB_CONTROL_PANEL = base.Columns["SRV_DB_CONTROL_PANEL"];
                this.columnSRV_DB_DNS = base.Columns["SRV_DB_DNS"];
                this.columnSRV_DB_NAME = base.Columns["SRV_DB_NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSRV_ID = new global::System.Data.DataColumn("SRV_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_ID);
                this.columnSRV_SERVER_TYPE = new global::System.Data.DataColumn("SRV_SERVER_TYPE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_SERVER_TYPE);
                this.columnSRV_IS_SSL = new global::System.Data.DataColumn("SRV_IS_SSL", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_IS_SSL);
                this.columnSRV_REG_CODE = new global::System.Data.DataColumn("SRV_REG_CODE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_REG_CODE);
                this.columnSRV_REG_DNS = new global::System.Data.DataColumn("SRV_REG_DNS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_REG_DNS);
                this.columnSRV_REG_DNS_COST = new global::System.Data.DataColumn("SRV_REG_DNS_COST", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_REG_DNS_COST);
                this.columnSRV_REG_DNS_CONTROL_PANEL = new global::System.Data.DataColumn("SRV_REG_DNS_CONTROL_PANEL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_REG_DNS_CONTROL_PANEL);
                this.columnSRV_REG_SUB_DOMAIN_NAME = new global::System.Data.DataColumn("SRV_REG_SUB_DOMAIN_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_REG_SUB_DOMAIN_NAME);
                this.columnSRV_HOST_CODE = new global::System.Data.DataColumn("SRV_HOST_CODE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_CODE);
                this.columnSRV_HOST_COST = new global::System.Data.DataColumn("SRV_HOST_COST", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_COST);
                this.columnSRV_HOST_CONTROL_PANEL_1 = new global::System.Data.DataColumn("SRV_HOST_CONTROL_PANEL_1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_CONTROL_PANEL_1);
                this.columnSRV_HOST_CONTROL_PANEL_2 = new global::System.Data.DataColumn("SRV_HOST_CONTROL_PANEL_2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_CONTROL_PANEL_2);
                this.columnSRV_HOST_PDF = new global::System.Data.DataColumn("SRV_HOST_PDF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_PDF);
                this.columnSRV_HOST_LOCATION = new global::System.Data.DataColumn("SRV_HOST_LOCATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_LOCATION);
                this.columnSRV_HOST_LAT = new global::System.Data.DataColumn("SRV_HOST_LAT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_LAT);
                this.columnSRV_HOST_LNG = new global::System.Data.DataColumn("SRV_HOST_LNG", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_LNG);
                this.columnSRV_HOST_APP_POOL_URL = new global::System.Data.DataColumn("SRV_HOST_APP_POOL_URL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_APP_POOL_URL);
                this.columnSRV_DB_COST = new global::System.Data.DataColumn("SRV_DB_COST", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_DB_COST);
                this.columnSRV_DB_CONTROL_PANEL = new global::System.Data.DataColumn("SRV_DB_CONTROL_PANEL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_DB_CONTROL_PANEL);
                this.columnSRV_DB_DNS = new global::System.Data.DataColumn("SRV_DB_DNS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_DB_DNS);
                this.columnSRV_DB_NAME = new global::System.Data.DataColumn("SRV_DB_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_DB_NAME);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSRV_ID}, true));
                this.columnSRV_ID.AutoIncrement = true;
                this.columnSRV_ID.AllowDBNull = false;
                this.columnSRV_ID.ReadOnly = true;
                this.columnSRV_ID.Unique = true;
                this.columnSRV_SERVER_TYPE.AllowDBNull = false;
                this.columnSRV_IS_SSL.AllowDBNull = false;
                this.columnSRV_REG_CODE.AllowDBNull = false;
                this.columnSRV_REG_DNS.AllowDBNull = false;
                this.columnSRV_REG_DNS.MaxLength = 255;
                this.columnSRV_REG_DNS_COST.AllowDBNull = false;
                this.columnSRV_REG_DNS_COST.MaxLength = 50;
                this.columnSRV_REG_DNS_CONTROL_PANEL.AllowDBNull = false;
                this.columnSRV_REG_DNS_CONTROL_PANEL.MaxLength = 255;
                this.columnSRV_REG_SUB_DOMAIN_NAME.AllowDBNull = false;
                this.columnSRV_REG_SUB_DOMAIN_NAME.MaxLength = 255;
                this.columnSRV_HOST_CODE.AllowDBNull = false;
                this.columnSRV_HOST_COST.MaxLength = 50;
                this.columnSRV_HOST_CONTROL_PANEL_1.MaxLength = 255;
                this.columnSRV_HOST_CONTROL_PANEL_2.MaxLength = 255;
                this.columnSRV_HOST_PDF.MaxLength = 50;
                this.columnSRV_HOST_LOCATION.MaxLength = 255;
                this.columnSRV_HOST_LAT.AllowDBNull = false;
                this.columnSRV_HOST_LNG.AllowDBNull = false;
                this.columnSRV_HOST_APP_POOL_URL.MaxLength = 255;
                this.columnSRV_DB_COST.MaxLength = 50;
                this.columnSRV_DB_CONTROL_PANEL.MaxLength = 255;
                this.columnSRV_DB_DNS.MaxLength = 255;
                this.columnSRV_DB_NAME.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_SERVERRow NewT_SERVERRow() {
                return ((T_SERVERRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new T_SERVERRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(T_SERVERRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.T_SERVERRowChanged != null)) {
                    this.T_SERVERRowChanged(this, new T_SERVERRowChangeEvent(((T_SERVERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.T_SERVERRowChanging != null)) {
                    this.T_SERVERRowChanging(this, new T_SERVERRowChangeEvent(((T_SERVERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.T_SERVERRowDeleted != null)) {
                    this.T_SERVERRowDeleted(this, new T_SERVERRowChangeEvent(((T_SERVERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.T_SERVERRowDeleting != null)) {
                    this.T_SERVERRowDeleting(this, new T_SERVERRowChangeEvent(((T_SERVERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveT_SERVERRow(T_SERVERRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ApplicationHandler ds = new ApplicationHandler();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "T_SERVERDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class T_SERVER_IISDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSRV_ID;
            
            private global::System.Data.DataColumn columnSRV_SERVER_TYPE;
            
            private global::System.Data.DataColumn columnSRV_IS_SSL;
            
            private global::System.Data.DataColumn columnSRV_REG_CODE;
            
            private global::System.Data.DataColumn columnSRV_REG_DNS;
            
            private global::System.Data.DataColumn columnSRV_REG_DNS_COST;
            
            private global::System.Data.DataColumn columnSRV_REG_DNS_CONTROL_PANEL;
            
            private global::System.Data.DataColumn columnSRV_REG_SUB_DOMAIN_NAME;
            
            private global::System.Data.DataColumn columnSRV_HOST_CODE;
            
            private global::System.Data.DataColumn columnSRV_HOST_COST;
            
            private global::System.Data.DataColumn columnSRV_HOST_CONTROL_PANEL_1;
            
            private global::System.Data.DataColumn columnSRV_HOST_CONTROL_PANEL_2;
            
            private global::System.Data.DataColumn columnSRV_HOST_PDF;
            
            private global::System.Data.DataColumn columnSRV_HOST_LOCATION;
            
            private global::System.Data.DataColumn columnSRV_HOST_LAT;
            
            private global::System.Data.DataColumn columnSRV_HOST_LNG;
            
            private global::System.Data.DataColumn columnSRV_HOST_APP_POOL_URL;
            
            private global::System.Data.DataColumn columnSRV_DB_COST;
            
            private global::System.Data.DataColumn columnSRV_DB_CONTROL_PANEL;
            
            private global::System.Data.DataColumn columnSRV_DB_DNS;
            
            private global::System.Data.DataColumn columnSRV_DB_NAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_SERVER_IISDataTable() {
                this.TableName = "T_SERVER_IIS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal T_SERVER_IISDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected T_SERVER_IISDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_IDColumn {
                get {
                    return this.columnSRV_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_SERVER_TYPEColumn {
                get {
                    return this.columnSRV_SERVER_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_IS_SSLColumn {
                get {
                    return this.columnSRV_IS_SSL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_REG_CODEColumn {
                get {
                    return this.columnSRV_REG_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_REG_DNSColumn {
                get {
                    return this.columnSRV_REG_DNS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_REG_DNS_COSTColumn {
                get {
                    return this.columnSRV_REG_DNS_COST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_REG_DNS_CONTROL_PANELColumn {
                get {
                    return this.columnSRV_REG_DNS_CONTROL_PANEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_REG_SUB_DOMAIN_NAMEColumn {
                get {
                    return this.columnSRV_REG_SUB_DOMAIN_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_CODEColumn {
                get {
                    return this.columnSRV_HOST_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_COSTColumn {
                get {
                    return this.columnSRV_HOST_COST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_CONTROL_PANEL_1Column {
                get {
                    return this.columnSRV_HOST_CONTROL_PANEL_1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_CONTROL_PANEL_2Column {
                get {
                    return this.columnSRV_HOST_CONTROL_PANEL_2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_PDFColumn {
                get {
                    return this.columnSRV_HOST_PDF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_LOCATIONColumn {
                get {
                    return this.columnSRV_HOST_LOCATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_LATColumn {
                get {
                    return this.columnSRV_HOST_LAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_LNGColumn {
                get {
                    return this.columnSRV_HOST_LNG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_APP_POOL_URLColumn {
                get {
                    return this.columnSRV_HOST_APP_POOL_URL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_DB_COSTColumn {
                get {
                    return this.columnSRV_DB_COST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_DB_CONTROL_PANELColumn {
                get {
                    return this.columnSRV_DB_CONTROL_PANEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_DB_DNSColumn {
                get {
                    return this.columnSRV_DB_DNS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_DB_NAMEColumn {
                get {
                    return this.columnSRV_DB_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_SERVER_IISRow this[int index] {
                get {
                    return ((T_SERVER_IISRow)(this.Rows[index]));
                }
            }
            
            public event T_SERVER_IISRowChangeEventHandler T_SERVER_IISRowChanging;
            
            public event T_SERVER_IISRowChangeEventHandler T_SERVER_IISRowChanged;
            
            public event T_SERVER_IISRowChangeEventHandler T_SERVER_IISRowDeleting;
            
            public event T_SERVER_IISRowChangeEventHandler T_SERVER_IISRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddT_SERVER_IISRow(T_SERVER_IISRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_SERVER_IISRow AddT_SERVER_IISRow(
                        int SRV_SERVER_TYPE, 
                        bool SRV_IS_SSL, 
                        int SRV_REG_CODE, 
                        string SRV_REG_DNS, 
                        string SRV_REG_DNS_COST, 
                        string SRV_REG_DNS_CONTROL_PANEL, 
                        string SRV_REG_SUB_DOMAIN_NAME, 
                        int SRV_HOST_CODE, 
                        string SRV_HOST_COST, 
                        string SRV_HOST_CONTROL_PANEL_1, 
                        string SRV_HOST_CONTROL_PANEL_2, 
                        string SRV_HOST_PDF, 
                        string SRV_HOST_LOCATION, 
                        decimal SRV_HOST_LAT, 
                        decimal SRV_HOST_LNG, 
                        string SRV_HOST_APP_POOL_URL, 
                        string SRV_DB_COST, 
                        string SRV_DB_CONTROL_PANEL, 
                        string SRV_DB_DNS, 
                        string SRV_DB_NAME) {
                T_SERVER_IISRow rowT_SERVER_IISRow = ((T_SERVER_IISRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        SRV_SERVER_TYPE,
                        SRV_IS_SSL,
                        SRV_REG_CODE,
                        SRV_REG_DNS,
                        SRV_REG_DNS_COST,
                        SRV_REG_DNS_CONTROL_PANEL,
                        SRV_REG_SUB_DOMAIN_NAME,
                        SRV_HOST_CODE,
                        SRV_HOST_COST,
                        SRV_HOST_CONTROL_PANEL_1,
                        SRV_HOST_CONTROL_PANEL_2,
                        SRV_HOST_PDF,
                        SRV_HOST_LOCATION,
                        SRV_HOST_LAT,
                        SRV_HOST_LNG,
                        SRV_HOST_APP_POOL_URL,
                        SRV_DB_COST,
                        SRV_DB_CONTROL_PANEL,
                        SRV_DB_DNS,
                        SRV_DB_NAME};
                rowT_SERVER_IISRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowT_SERVER_IISRow);
                return rowT_SERVER_IISRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_SERVER_IISRow FindBySRV_ID(int SRV_ID) {
                return ((T_SERVER_IISRow)(this.Rows.Find(new object[] {
                            SRV_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                T_SERVER_IISDataTable cln = ((T_SERVER_IISDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new T_SERVER_IISDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSRV_ID = base.Columns["SRV_ID"];
                this.columnSRV_SERVER_TYPE = base.Columns["SRV_SERVER_TYPE"];
                this.columnSRV_IS_SSL = base.Columns["SRV_IS_SSL"];
                this.columnSRV_REG_CODE = base.Columns["SRV_REG_CODE"];
                this.columnSRV_REG_DNS = base.Columns["SRV_REG_DNS"];
                this.columnSRV_REG_DNS_COST = base.Columns["SRV_REG_DNS_COST"];
                this.columnSRV_REG_DNS_CONTROL_PANEL = base.Columns["SRV_REG_DNS_CONTROL_PANEL"];
                this.columnSRV_REG_SUB_DOMAIN_NAME = base.Columns["SRV_REG_SUB_DOMAIN_NAME"];
                this.columnSRV_HOST_CODE = base.Columns["SRV_HOST_CODE"];
                this.columnSRV_HOST_COST = base.Columns["SRV_HOST_COST"];
                this.columnSRV_HOST_CONTROL_PANEL_1 = base.Columns["SRV_HOST_CONTROL_PANEL_1"];
                this.columnSRV_HOST_CONTROL_PANEL_2 = base.Columns["SRV_HOST_CONTROL_PANEL_2"];
                this.columnSRV_HOST_PDF = base.Columns["SRV_HOST_PDF"];
                this.columnSRV_HOST_LOCATION = base.Columns["SRV_HOST_LOCATION"];
                this.columnSRV_HOST_LAT = base.Columns["SRV_HOST_LAT"];
                this.columnSRV_HOST_LNG = base.Columns["SRV_HOST_LNG"];
                this.columnSRV_HOST_APP_POOL_URL = base.Columns["SRV_HOST_APP_POOL_URL"];
                this.columnSRV_DB_COST = base.Columns["SRV_DB_COST"];
                this.columnSRV_DB_CONTROL_PANEL = base.Columns["SRV_DB_CONTROL_PANEL"];
                this.columnSRV_DB_DNS = base.Columns["SRV_DB_DNS"];
                this.columnSRV_DB_NAME = base.Columns["SRV_DB_NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSRV_ID = new global::System.Data.DataColumn("SRV_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_ID);
                this.columnSRV_SERVER_TYPE = new global::System.Data.DataColumn("SRV_SERVER_TYPE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_SERVER_TYPE);
                this.columnSRV_IS_SSL = new global::System.Data.DataColumn("SRV_IS_SSL", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_IS_SSL);
                this.columnSRV_REG_CODE = new global::System.Data.DataColumn("SRV_REG_CODE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_REG_CODE);
                this.columnSRV_REG_DNS = new global::System.Data.DataColumn("SRV_REG_DNS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_REG_DNS);
                this.columnSRV_REG_DNS_COST = new global::System.Data.DataColumn("SRV_REG_DNS_COST", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_REG_DNS_COST);
                this.columnSRV_REG_DNS_CONTROL_PANEL = new global::System.Data.DataColumn("SRV_REG_DNS_CONTROL_PANEL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_REG_DNS_CONTROL_PANEL);
                this.columnSRV_REG_SUB_DOMAIN_NAME = new global::System.Data.DataColumn("SRV_REG_SUB_DOMAIN_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_REG_SUB_DOMAIN_NAME);
                this.columnSRV_HOST_CODE = new global::System.Data.DataColumn("SRV_HOST_CODE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_CODE);
                this.columnSRV_HOST_COST = new global::System.Data.DataColumn("SRV_HOST_COST", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_COST);
                this.columnSRV_HOST_CONTROL_PANEL_1 = new global::System.Data.DataColumn("SRV_HOST_CONTROL_PANEL_1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_CONTROL_PANEL_1);
                this.columnSRV_HOST_CONTROL_PANEL_2 = new global::System.Data.DataColumn("SRV_HOST_CONTROL_PANEL_2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_CONTROL_PANEL_2);
                this.columnSRV_HOST_PDF = new global::System.Data.DataColumn("SRV_HOST_PDF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_PDF);
                this.columnSRV_HOST_LOCATION = new global::System.Data.DataColumn("SRV_HOST_LOCATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_LOCATION);
                this.columnSRV_HOST_LAT = new global::System.Data.DataColumn("SRV_HOST_LAT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_LAT);
                this.columnSRV_HOST_LNG = new global::System.Data.DataColumn("SRV_HOST_LNG", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_LNG);
                this.columnSRV_HOST_APP_POOL_URL = new global::System.Data.DataColumn("SRV_HOST_APP_POOL_URL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_APP_POOL_URL);
                this.columnSRV_DB_COST = new global::System.Data.DataColumn("SRV_DB_COST", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_DB_COST);
                this.columnSRV_DB_CONTROL_PANEL = new global::System.Data.DataColumn("SRV_DB_CONTROL_PANEL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_DB_CONTROL_PANEL);
                this.columnSRV_DB_DNS = new global::System.Data.DataColumn("SRV_DB_DNS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_DB_DNS);
                this.columnSRV_DB_NAME = new global::System.Data.DataColumn("SRV_DB_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_DB_NAME);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSRV_ID}, true));
                this.columnSRV_ID.AutoIncrement = true;
                this.columnSRV_ID.AllowDBNull = false;
                this.columnSRV_ID.ReadOnly = true;
                this.columnSRV_ID.Unique = true;
                this.columnSRV_SERVER_TYPE.AllowDBNull = false;
                this.columnSRV_IS_SSL.AllowDBNull = false;
                this.columnSRV_REG_CODE.AllowDBNull = false;
                this.columnSRV_REG_DNS.AllowDBNull = false;
                this.columnSRV_REG_DNS.MaxLength = 255;
                this.columnSRV_REG_DNS_COST.AllowDBNull = false;
                this.columnSRV_REG_DNS_COST.MaxLength = 50;
                this.columnSRV_REG_DNS_CONTROL_PANEL.AllowDBNull = false;
                this.columnSRV_REG_DNS_CONTROL_PANEL.MaxLength = 255;
                this.columnSRV_REG_SUB_DOMAIN_NAME.AllowDBNull = false;
                this.columnSRV_REG_SUB_DOMAIN_NAME.MaxLength = 255;
                this.columnSRV_HOST_CODE.AllowDBNull = false;
                this.columnSRV_HOST_COST.MaxLength = 50;
                this.columnSRV_HOST_CONTROL_PANEL_1.MaxLength = 255;
                this.columnSRV_HOST_CONTROL_PANEL_2.MaxLength = 255;
                this.columnSRV_HOST_PDF.MaxLength = 50;
                this.columnSRV_HOST_LOCATION.MaxLength = 255;
                this.columnSRV_HOST_LAT.AllowDBNull = false;
                this.columnSRV_HOST_LNG.AllowDBNull = false;
                this.columnSRV_HOST_APP_POOL_URL.MaxLength = 255;
                this.columnSRV_DB_COST.MaxLength = 50;
                this.columnSRV_DB_CONTROL_PANEL.MaxLength = 255;
                this.columnSRV_DB_DNS.MaxLength = 255;
                this.columnSRV_DB_NAME.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_SERVER_IISRow NewT_SERVER_IISRow() {
                return ((T_SERVER_IISRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new T_SERVER_IISRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(T_SERVER_IISRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.T_SERVER_IISRowChanged != null)) {
                    this.T_SERVER_IISRowChanged(this, new T_SERVER_IISRowChangeEvent(((T_SERVER_IISRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.T_SERVER_IISRowChanging != null)) {
                    this.T_SERVER_IISRowChanging(this, new T_SERVER_IISRowChangeEvent(((T_SERVER_IISRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.T_SERVER_IISRowDeleted != null)) {
                    this.T_SERVER_IISRowDeleted(this, new T_SERVER_IISRowChangeEvent(((T_SERVER_IISRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.T_SERVER_IISRowDeleting != null)) {
                    this.T_SERVER_IISRowDeleting(this, new T_SERVER_IISRowChangeEvent(((T_SERVER_IISRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveT_SERVER_IISRow(T_SERVER_IISRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ApplicationHandler ds = new ApplicationHandler();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "T_SERVER_IISDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class T_SERVER_BLDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSRV_ID;
            
            private global::System.Data.DataColumn columnSRV_SERVER_TYPE;
            
            private global::System.Data.DataColumn columnSRV_IS_SSL;
            
            private global::System.Data.DataColumn columnSRV_REG_CODE;
            
            private global::System.Data.DataColumn columnSRV_REG_DNS;
            
            private global::System.Data.DataColumn columnSRV_REG_DNS_COST;
            
            private global::System.Data.DataColumn columnSRV_REG_DNS_CONTROL_PANEL;
            
            private global::System.Data.DataColumn columnSRV_REG_SUB_DOMAIN_NAME;
            
            private global::System.Data.DataColumn columnSRV_HOST_CODE;
            
            private global::System.Data.DataColumn columnSRV_HOST_COST;
            
            private global::System.Data.DataColumn columnSRV_HOST_CONTROL_PANEL_1;
            
            private global::System.Data.DataColumn columnSRV_HOST_CONTROL_PANEL_2;
            
            private global::System.Data.DataColumn columnSRV_HOST_PDF;
            
            private global::System.Data.DataColumn columnSRV_HOST_LOCATION;
            
            private global::System.Data.DataColumn columnSRV_HOST_LAT;
            
            private global::System.Data.DataColumn columnSRV_HOST_LNG;
            
            private global::System.Data.DataColumn columnSRV_HOST_APP_POOL_URL;
            
            private global::System.Data.DataColumn columnSRV_DB_COST;
            
            private global::System.Data.DataColumn columnSRV_DB_CONTROL_PANEL;
            
            private global::System.Data.DataColumn columnSRV_DB_DNS;
            
            private global::System.Data.DataColumn columnSRV_DB_NAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_SERVER_BLDataTable() {
                this.TableName = "T_SERVER_BL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal T_SERVER_BLDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected T_SERVER_BLDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_IDColumn {
                get {
                    return this.columnSRV_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_SERVER_TYPEColumn {
                get {
                    return this.columnSRV_SERVER_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_IS_SSLColumn {
                get {
                    return this.columnSRV_IS_SSL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_REG_CODEColumn {
                get {
                    return this.columnSRV_REG_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_REG_DNSColumn {
                get {
                    return this.columnSRV_REG_DNS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_REG_DNS_COSTColumn {
                get {
                    return this.columnSRV_REG_DNS_COST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_REG_DNS_CONTROL_PANELColumn {
                get {
                    return this.columnSRV_REG_DNS_CONTROL_PANEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_REG_SUB_DOMAIN_NAMEColumn {
                get {
                    return this.columnSRV_REG_SUB_DOMAIN_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_CODEColumn {
                get {
                    return this.columnSRV_HOST_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_COSTColumn {
                get {
                    return this.columnSRV_HOST_COST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_CONTROL_PANEL_1Column {
                get {
                    return this.columnSRV_HOST_CONTROL_PANEL_1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_CONTROL_PANEL_2Column {
                get {
                    return this.columnSRV_HOST_CONTROL_PANEL_2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_PDFColumn {
                get {
                    return this.columnSRV_HOST_PDF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_LOCATIONColumn {
                get {
                    return this.columnSRV_HOST_LOCATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_LATColumn {
                get {
                    return this.columnSRV_HOST_LAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_LNGColumn {
                get {
                    return this.columnSRV_HOST_LNG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_HOST_APP_POOL_URLColumn {
                get {
                    return this.columnSRV_HOST_APP_POOL_URL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_DB_COSTColumn {
                get {
                    return this.columnSRV_DB_COST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_DB_CONTROL_PANELColumn {
                get {
                    return this.columnSRV_DB_CONTROL_PANEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_DB_DNSColumn {
                get {
                    return this.columnSRV_DB_DNS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRV_DB_NAMEColumn {
                get {
                    return this.columnSRV_DB_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_SERVER_BLRow this[int index] {
                get {
                    return ((T_SERVER_BLRow)(this.Rows[index]));
                }
            }
            
            public event T_SERVER_BLRowChangeEventHandler T_SERVER_BLRowChanging;
            
            public event T_SERVER_BLRowChangeEventHandler T_SERVER_BLRowChanged;
            
            public event T_SERVER_BLRowChangeEventHandler T_SERVER_BLRowDeleting;
            
            public event T_SERVER_BLRowChangeEventHandler T_SERVER_BLRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddT_SERVER_BLRow(T_SERVER_BLRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_SERVER_BLRow AddT_SERVER_BLRow(
                        int SRV_SERVER_TYPE, 
                        bool SRV_IS_SSL, 
                        int SRV_REG_CODE, 
                        string SRV_REG_DNS, 
                        string SRV_REG_DNS_COST, 
                        string SRV_REG_DNS_CONTROL_PANEL, 
                        string SRV_REG_SUB_DOMAIN_NAME, 
                        int SRV_HOST_CODE, 
                        string SRV_HOST_COST, 
                        string SRV_HOST_CONTROL_PANEL_1, 
                        string SRV_HOST_CONTROL_PANEL_2, 
                        string SRV_HOST_PDF, 
                        string SRV_HOST_LOCATION, 
                        decimal SRV_HOST_LAT, 
                        decimal SRV_HOST_LNG, 
                        string SRV_HOST_APP_POOL_URL, 
                        string SRV_DB_COST, 
                        string SRV_DB_CONTROL_PANEL, 
                        string SRV_DB_DNS, 
                        string SRV_DB_NAME) {
                T_SERVER_BLRow rowT_SERVER_BLRow = ((T_SERVER_BLRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        SRV_SERVER_TYPE,
                        SRV_IS_SSL,
                        SRV_REG_CODE,
                        SRV_REG_DNS,
                        SRV_REG_DNS_COST,
                        SRV_REG_DNS_CONTROL_PANEL,
                        SRV_REG_SUB_DOMAIN_NAME,
                        SRV_HOST_CODE,
                        SRV_HOST_COST,
                        SRV_HOST_CONTROL_PANEL_1,
                        SRV_HOST_CONTROL_PANEL_2,
                        SRV_HOST_PDF,
                        SRV_HOST_LOCATION,
                        SRV_HOST_LAT,
                        SRV_HOST_LNG,
                        SRV_HOST_APP_POOL_URL,
                        SRV_DB_COST,
                        SRV_DB_CONTROL_PANEL,
                        SRV_DB_DNS,
                        SRV_DB_NAME};
                rowT_SERVER_BLRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowT_SERVER_BLRow);
                return rowT_SERVER_BLRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_SERVER_BLRow FindBySRV_ID(int SRV_ID) {
                return ((T_SERVER_BLRow)(this.Rows.Find(new object[] {
                            SRV_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                T_SERVER_BLDataTable cln = ((T_SERVER_BLDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new T_SERVER_BLDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSRV_ID = base.Columns["SRV_ID"];
                this.columnSRV_SERVER_TYPE = base.Columns["SRV_SERVER_TYPE"];
                this.columnSRV_IS_SSL = base.Columns["SRV_IS_SSL"];
                this.columnSRV_REG_CODE = base.Columns["SRV_REG_CODE"];
                this.columnSRV_REG_DNS = base.Columns["SRV_REG_DNS"];
                this.columnSRV_REG_DNS_COST = base.Columns["SRV_REG_DNS_COST"];
                this.columnSRV_REG_DNS_CONTROL_PANEL = base.Columns["SRV_REG_DNS_CONTROL_PANEL"];
                this.columnSRV_REG_SUB_DOMAIN_NAME = base.Columns["SRV_REG_SUB_DOMAIN_NAME"];
                this.columnSRV_HOST_CODE = base.Columns["SRV_HOST_CODE"];
                this.columnSRV_HOST_COST = base.Columns["SRV_HOST_COST"];
                this.columnSRV_HOST_CONTROL_PANEL_1 = base.Columns["SRV_HOST_CONTROL_PANEL_1"];
                this.columnSRV_HOST_CONTROL_PANEL_2 = base.Columns["SRV_HOST_CONTROL_PANEL_2"];
                this.columnSRV_HOST_PDF = base.Columns["SRV_HOST_PDF"];
                this.columnSRV_HOST_LOCATION = base.Columns["SRV_HOST_LOCATION"];
                this.columnSRV_HOST_LAT = base.Columns["SRV_HOST_LAT"];
                this.columnSRV_HOST_LNG = base.Columns["SRV_HOST_LNG"];
                this.columnSRV_HOST_APP_POOL_URL = base.Columns["SRV_HOST_APP_POOL_URL"];
                this.columnSRV_DB_COST = base.Columns["SRV_DB_COST"];
                this.columnSRV_DB_CONTROL_PANEL = base.Columns["SRV_DB_CONTROL_PANEL"];
                this.columnSRV_DB_DNS = base.Columns["SRV_DB_DNS"];
                this.columnSRV_DB_NAME = base.Columns["SRV_DB_NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSRV_ID = new global::System.Data.DataColumn("SRV_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_ID);
                this.columnSRV_SERVER_TYPE = new global::System.Data.DataColumn("SRV_SERVER_TYPE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_SERVER_TYPE);
                this.columnSRV_IS_SSL = new global::System.Data.DataColumn("SRV_IS_SSL", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_IS_SSL);
                this.columnSRV_REG_CODE = new global::System.Data.DataColumn("SRV_REG_CODE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_REG_CODE);
                this.columnSRV_REG_DNS = new global::System.Data.DataColumn("SRV_REG_DNS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_REG_DNS);
                this.columnSRV_REG_DNS_COST = new global::System.Data.DataColumn("SRV_REG_DNS_COST", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_REG_DNS_COST);
                this.columnSRV_REG_DNS_CONTROL_PANEL = new global::System.Data.DataColumn("SRV_REG_DNS_CONTROL_PANEL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_REG_DNS_CONTROL_PANEL);
                this.columnSRV_REG_SUB_DOMAIN_NAME = new global::System.Data.DataColumn("SRV_REG_SUB_DOMAIN_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_REG_SUB_DOMAIN_NAME);
                this.columnSRV_HOST_CODE = new global::System.Data.DataColumn("SRV_HOST_CODE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_CODE);
                this.columnSRV_HOST_COST = new global::System.Data.DataColumn("SRV_HOST_COST", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_COST);
                this.columnSRV_HOST_CONTROL_PANEL_1 = new global::System.Data.DataColumn("SRV_HOST_CONTROL_PANEL_1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_CONTROL_PANEL_1);
                this.columnSRV_HOST_CONTROL_PANEL_2 = new global::System.Data.DataColumn("SRV_HOST_CONTROL_PANEL_2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_CONTROL_PANEL_2);
                this.columnSRV_HOST_PDF = new global::System.Data.DataColumn("SRV_HOST_PDF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_PDF);
                this.columnSRV_HOST_LOCATION = new global::System.Data.DataColumn("SRV_HOST_LOCATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_LOCATION);
                this.columnSRV_HOST_LAT = new global::System.Data.DataColumn("SRV_HOST_LAT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_LAT);
                this.columnSRV_HOST_LNG = new global::System.Data.DataColumn("SRV_HOST_LNG", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_LNG);
                this.columnSRV_HOST_APP_POOL_URL = new global::System.Data.DataColumn("SRV_HOST_APP_POOL_URL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_HOST_APP_POOL_URL);
                this.columnSRV_DB_COST = new global::System.Data.DataColumn("SRV_DB_COST", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_DB_COST);
                this.columnSRV_DB_CONTROL_PANEL = new global::System.Data.DataColumn("SRV_DB_CONTROL_PANEL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_DB_CONTROL_PANEL);
                this.columnSRV_DB_DNS = new global::System.Data.DataColumn("SRV_DB_DNS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_DB_DNS);
                this.columnSRV_DB_NAME = new global::System.Data.DataColumn("SRV_DB_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRV_DB_NAME);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSRV_ID}, true));
                this.columnSRV_ID.AutoIncrement = true;
                this.columnSRV_ID.AllowDBNull = false;
                this.columnSRV_ID.ReadOnly = true;
                this.columnSRV_ID.Unique = true;
                this.columnSRV_SERVER_TYPE.AllowDBNull = false;
                this.columnSRV_IS_SSL.AllowDBNull = false;
                this.columnSRV_REG_CODE.AllowDBNull = false;
                this.columnSRV_REG_DNS.AllowDBNull = false;
                this.columnSRV_REG_DNS.MaxLength = 255;
                this.columnSRV_REG_DNS_COST.AllowDBNull = false;
                this.columnSRV_REG_DNS_COST.MaxLength = 50;
                this.columnSRV_REG_DNS_CONTROL_PANEL.AllowDBNull = false;
                this.columnSRV_REG_DNS_CONTROL_PANEL.MaxLength = 255;
                this.columnSRV_REG_SUB_DOMAIN_NAME.AllowDBNull = false;
                this.columnSRV_REG_SUB_DOMAIN_NAME.MaxLength = 255;
                this.columnSRV_HOST_CODE.AllowDBNull = false;
                this.columnSRV_HOST_COST.MaxLength = 50;
                this.columnSRV_HOST_CONTROL_PANEL_1.MaxLength = 255;
                this.columnSRV_HOST_CONTROL_PANEL_2.MaxLength = 255;
                this.columnSRV_HOST_PDF.MaxLength = 50;
                this.columnSRV_HOST_LOCATION.MaxLength = 255;
                this.columnSRV_HOST_LAT.AllowDBNull = false;
                this.columnSRV_HOST_LNG.AllowDBNull = false;
                this.columnSRV_HOST_APP_POOL_URL.MaxLength = 255;
                this.columnSRV_DB_COST.MaxLength = 50;
                this.columnSRV_DB_CONTROL_PANEL.MaxLength = 255;
                this.columnSRV_DB_DNS.MaxLength = 255;
                this.columnSRV_DB_NAME.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_SERVER_BLRow NewT_SERVER_BLRow() {
                return ((T_SERVER_BLRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new T_SERVER_BLRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(T_SERVER_BLRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.T_SERVER_BLRowChanged != null)) {
                    this.T_SERVER_BLRowChanged(this, new T_SERVER_BLRowChangeEvent(((T_SERVER_BLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.T_SERVER_BLRowChanging != null)) {
                    this.T_SERVER_BLRowChanging(this, new T_SERVER_BLRowChangeEvent(((T_SERVER_BLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.T_SERVER_BLRowDeleted != null)) {
                    this.T_SERVER_BLRowDeleted(this, new T_SERVER_BLRowChangeEvent(((T_SERVER_BLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.T_SERVER_BLRowDeleting != null)) {
                    this.T_SERVER_BLRowDeleting(this, new T_SERVER_BLRowChangeEvent(((T_SERVER_BLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveT_SERVER_BLRow(T_SERVER_BLRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ApplicationHandler ds = new ApplicationHandler();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "T_SERVER_BLDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class T_FB_LOCALE_TYPEDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFBL_CODE;
            
            private global::System.Data.DataColumn columnFBL_FB_LOCALE;
            
            private global::System.Data.DataColumn columnFBL_LOCALE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_FB_LOCALE_TYPEDataTable() {
                this.TableName = "T_FB_LOCALE_TYPE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal T_FB_LOCALE_TYPEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected T_FB_LOCALE_TYPEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FBL_CODEColumn {
                get {
                    return this.columnFBL_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FBL_FB_LOCALEColumn {
                get {
                    return this.columnFBL_FB_LOCALE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FBL_LOCALEColumn {
                get {
                    return this.columnFBL_LOCALE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_FB_LOCALE_TYPERow this[int index] {
                get {
                    return ((T_FB_LOCALE_TYPERow)(this.Rows[index]));
                }
            }
            
            public event T_FB_LOCALE_TYPERowChangeEventHandler T_FB_LOCALE_TYPERowChanging;
            
            public event T_FB_LOCALE_TYPERowChangeEventHandler T_FB_LOCALE_TYPERowChanged;
            
            public event T_FB_LOCALE_TYPERowChangeEventHandler T_FB_LOCALE_TYPERowDeleting;
            
            public event T_FB_LOCALE_TYPERowChangeEventHandler T_FB_LOCALE_TYPERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddT_FB_LOCALE_TYPERow(T_FB_LOCALE_TYPERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_FB_LOCALE_TYPERow AddT_FB_LOCALE_TYPERow(int FBL_CODE, string FBL_FB_LOCALE, string FBL_LOCALE) {
                T_FB_LOCALE_TYPERow rowT_FB_LOCALE_TYPERow = ((T_FB_LOCALE_TYPERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FBL_CODE,
                        FBL_FB_LOCALE,
                        FBL_LOCALE};
                rowT_FB_LOCALE_TYPERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowT_FB_LOCALE_TYPERow);
                return rowT_FB_LOCALE_TYPERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_FB_LOCALE_TYPERow FindByFBL_CODE(int FBL_CODE) {
                return ((T_FB_LOCALE_TYPERow)(this.Rows.Find(new object[] {
                            FBL_CODE})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                T_FB_LOCALE_TYPEDataTable cln = ((T_FB_LOCALE_TYPEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new T_FB_LOCALE_TYPEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFBL_CODE = base.Columns["FBL_CODE"];
                this.columnFBL_FB_LOCALE = base.Columns["FBL_FB_LOCALE"];
                this.columnFBL_LOCALE = base.Columns["FBL_LOCALE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFBL_CODE = new global::System.Data.DataColumn("FBL_CODE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFBL_CODE);
                this.columnFBL_FB_LOCALE = new global::System.Data.DataColumn("FBL_FB_LOCALE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFBL_FB_LOCALE);
                this.columnFBL_LOCALE = new global::System.Data.DataColumn("FBL_LOCALE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFBL_LOCALE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFBL_CODE}, true));
                this.columnFBL_CODE.AllowDBNull = false;
                this.columnFBL_CODE.Unique = true;
                this.columnFBL_FB_LOCALE.MaxLength = 10;
                this.columnFBL_LOCALE.MaxLength = 5;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_FB_LOCALE_TYPERow NewT_FB_LOCALE_TYPERow() {
                return ((T_FB_LOCALE_TYPERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new T_FB_LOCALE_TYPERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(T_FB_LOCALE_TYPERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.T_FB_LOCALE_TYPERowChanged != null)) {
                    this.T_FB_LOCALE_TYPERowChanged(this, new T_FB_LOCALE_TYPERowChangeEvent(((T_FB_LOCALE_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.T_FB_LOCALE_TYPERowChanging != null)) {
                    this.T_FB_LOCALE_TYPERowChanging(this, new T_FB_LOCALE_TYPERowChangeEvent(((T_FB_LOCALE_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.T_FB_LOCALE_TYPERowDeleted != null)) {
                    this.T_FB_LOCALE_TYPERowDeleted(this, new T_FB_LOCALE_TYPERowChangeEvent(((T_FB_LOCALE_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.T_FB_LOCALE_TYPERowDeleting != null)) {
                    this.T_FB_LOCALE_TYPERowDeleting(this, new T_FB_LOCALE_TYPERowChangeEvent(((T_FB_LOCALE_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveT_FB_LOCALE_TYPERow(T_FB_LOCALE_TYPERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ApplicationHandler ds = new ApplicationHandler();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "T_FB_LOCALE_TYPEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class T_IP_LAT_LNGRow : global::System.Data.DataRow {
            
            private T_IP_LAT_LNGDataTable tableT_IP_LAT_LNG;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal T_IP_LAT_LNGRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableT_IP_LAT_LNG = ((T_IP_LAT_LNGDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long IPL_IP {
                get {
                    return ((long)(this[this.tableT_IP_LAT_LNG.IPL_IPColumn]));
                }
                set {
                    this[this.tableT_IP_LAT_LNG.IPL_IPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IPL_LAT {
                get {
                    return ((decimal)(this[this.tableT_IP_LAT_LNG.IPL_LATColumn]));
                }
                set {
                    this[this.tableT_IP_LAT_LNG.IPL_LATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IPL_LNG {
                get {
                    return ((decimal)(this[this.tableT_IP_LAT_LNG.IPL_LNGColumn]));
                }
                set {
                    this[this.tableT_IP_LAT_LNG.IPL_LNGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IPL_IIS_SERVER_ID {
                get {
                    return ((int)(this[this.tableT_IP_LAT_LNG.IPL_IIS_SERVER_IDColumn]));
                }
                set {
                    this[this.tableT_IP_LAT_LNG.IPL_IIS_SERVER_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IPL_BL_SERVER_ID {
                get {
                    return ((int)(this[this.tableT_IP_LAT_LNG.IPL_BL_SERVER_IDColumn]));
                }
                set {
                    this[this.tableT_IP_LAT_LNG.IPL_BL_SERVER_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IPL_VALIDATE {
                get {
                    return ((bool)(this[this.tableT_IP_LAT_LNG.IPL_VALIDATEColumn]));
                }
                set {
                    this[this.tableT_IP_LAT_LNG.IPL_VALIDATEColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class T_IP_LAT_LNG_ValidateRow : global::System.Data.DataRow {
            
            private T_IP_LAT_LNG_ValidateDataTable tableT_IP_LAT_LNG_Validate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal T_IP_LAT_LNG_ValidateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableT_IP_LAT_LNG_Validate = ((T_IP_LAT_LNG_ValidateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long IPL_IP {
                get {
                    return ((long)(this[this.tableT_IP_LAT_LNG_Validate.IPL_IPColumn]));
                }
                set {
                    this[this.tableT_IP_LAT_LNG_Validate.IPL_IPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IPL_LAT {
                get {
                    return ((decimal)(this[this.tableT_IP_LAT_LNG_Validate.IPL_LATColumn]));
                }
                set {
                    this[this.tableT_IP_LAT_LNG_Validate.IPL_LATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IPL_LNG {
                get {
                    return ((decimal)(this[this.tableT_IP_LAT_LNG_Validate.IPL_LNGColumn]));
                }
                set {
                    this[this.tableT_IP_LAT_LNG_Validate.IPL_LNGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IPL_IIS_SERVER_ID {
                get {
                    return ((int)(this[this.tableT_IP_LAT_LNG_Validate.IPL_IIS_SERVER_IDColumn]));
                }
                set {
                    this[this.tableT_IP_LAT_LNG_Validate.IPL_IIS_SERVER_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IPL_BL_SERVER_ID {
                get {
                    return ((int)(this[this.tableT_IP_LAT_LNG_Validate.IPL_BL_SERVER_IDColumn]));
                }
                set {
                    this[this.tableT_IP_LAT_LNG_Validate.IPL_BL_SERVER_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IPL_VALIDATE {
                get {
                    return ((bool)(this[this.tableT_IP_LAT_LNG_Validate.IPL_VALIDATEColumn]));
                }
                set {
                    this[this.tableT_IP_LAT_LNG_Validate.IPL_VALIDATEColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class T_REGISTERRow : global::System.Data.DataRow {
            
            private T_REGISTERDataTable tableT_REGISTER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal T_REGISTERRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableT_REGISTER = ((T_REGISTERDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int REG_ID {
                get {
                    return ((int)(this[this.tableT_REGISTER.REG_IDColumn]));
                }
                set {
                    this[this.tableT_REGISTER.REG_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REG_DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tableT_REGISTER.REG_DESCRIPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REG_DESCRIPTION\' in table \'T_REGISTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_REGISTER.REG_DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REG_WEB_SITE {
                get {
                    try {
                        return ((string)(this[this.tableT_REGISTER.REG_WEB_SITEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REG_WEB_SITE\' in table \'T_REGISTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_REGISTER.REG_WEB_SITEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREG_DESCRIPTIONNull() {
                return this.IsNull(this.tableT_REGISTER.REG_DESCRIPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREG_DESCRIPTIONNull() {
                this[this.tableT_REGISTER.REG_DESCRIPTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREG_WEB_SITENull() {
                return this.IsNull(this.tableT_REGISTER.REG_WEB_SITEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREG_WEB_SITENull() {
                this[this.tableT_REGISTER.REG_WEB_SITEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class T_HOSTINGRow : global::System.Data.DataRow {
            
            private T_HOSTINGDataTable tableT_HOSTING;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal T_HOSTINGRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableT_HOSTING = ((T_HOSTINGDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HST_ID {
                get {
                    return ((int)(this[this.tableT_HOSTING.HST_IDColumn]));
                }
                set {
                    this[this.tableT_HOSTING.HST_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HST_DESCRIPTION {
                get {
                    return ((string)(this[this.tableT_HOSTING.HST_DESCRIPTIONColumn]));
                }
                set {
                    this[this.tableT_HOSTING.HST_DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HST_WEB_SITE {
                get {
                    try {
                        return ((string)(this[this.tableT_HOSTING.HST_WEB_SITEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HST_WEB_SITE\' in table \'T_HOSTING\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_HOSTING.HST_WEB_SITEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHST_WEB_SITENull() {
                return this.IsNull(this.tableT_HOSTING.HST_WEB_SITEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHST_WEB_SITENull() {
                this[this.tableT_HOSTING.HST_WEB_SITEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PT_SERVERSelectBySRV_SERVER_TYPE_IISRow : global::System.Data.DataRow {
            
            private PT_SERVERSelectBySRV_SERVER_TYPE_IISDataTable tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PT_SERVERSelectBySRV_SERVER_TYPE_IISRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS = ((PT_SERVERSelectBySRV_SERVER_TYPE_IISDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SRV_ID {
                get {
                    return ((int)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_IDColumn]));
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRT_DESCRIPTION {
                get {
                    return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRT_DESCRIPTIONColumn]));
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRT_DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRT_PIC_URL {
                get {
                    return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRT_PIC_URLColumn]));
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRT_PIC_URLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REG_DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.REG_DESCRIPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REG_DESCRIPTION\' in table \'PT_SERVERSelectBySRV_SERVER_TYPE" +
                                "_IIS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.REG_DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REG_WEB_SITE {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.REG_WEB_SITEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REG_WEB_SITE\' in table \'PT_SERVERSelectBySRV_SERVER_TYPE_II" +
                                "S\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.REG_WEB_SITEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_REG_DNS {
                get {
                    return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_REG_DNSColumn]));
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_REG_DNSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_REG_DNS_CONTROL_PANEL {
                get {
                    return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_REG_DNS_CONTROL_PANELColumn]));
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_REG_DNS_CONTROL_PANELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_REG_SUB_DOMAIN_NAME {
                get {
                    return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_REG_SUB_DOMAIN_NAMEColumn]));
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_REG_SUB_DOMAIN_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HST_DESCRIPTION {
                get {
                    return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.HST_DESCRIPTIONColumn]));
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.HST_DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HST_WEB_SITE {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.HST_WEB_SITEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HST_WEB_SITE\' in table \'PT_SERVERSelectBySRV_SERVER_TYPE_II" +
                                "S\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.HST_WEB_SITEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_CONTROL_PANEL_1 {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_HOST_CONTROL_PANEL_1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_CONTROL_PANEL_1\' in table \'PT_SERVERSelectBySRV_SE" +
                                "RVER_TYPE_IIS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_HOST_CONTROL_PANEL_1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_CONTROL_PANEL_2 {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_HOST_CONTROL_PANEL_2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_CONTROL_PANEL_2\' in table \'PT_SERVERSelectBySRV_SE" +
                                "RVER_TYPE_IIS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_HOST_CONTROL_PANEL_2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_PDF {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_HOST_PDFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_PDF\' in table \'PT_SERVERSelectBySRV_SERVER_TYPE_II" +
                                "S\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_HOST_PDFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_LOCATION {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_HOST_LOCATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_LOCATION\' in table \'PT_SERVERSelectBySRV_SERVER_TY" +
                                "PE_IIS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_HOST_LOCATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SRV_HOST_LAT {
                get {
                    return ((decimal)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_HOST_LATColumn]));
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_HOST_LATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SRV_HOST_LNG {
                get {
                    return ((decimal)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_HOST_LNGColumn]));
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_HOST_LNGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_APP_POOL_URL {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_HOST_APP_POOL_URLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_APP_POOL_URL\' in table \'PT_SERVERSelectBySRV_SERVE" +
                                "R_TYPE_IIS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_HOST_APP_POOL_URLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_DB_DNS {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_DB_DNSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_DB_DNS\' in table \'PT_SERVERSelectBySRV_SERVER_TYPE_IIS\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_DB_DNSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_DB_CONTROL_PANEL {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_DB_CONTROL_PANELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_DB_CONTROL_PANEL\' in table \'PT_SERVERSelectBySRV_SERVER" +
                                "_TYPE_IIS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_DB_CONTROL_PANELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_DB_NAME {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_DB_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_DB_NAME\' in table \'PT_SERVERSelectBySRV_SERVER_TYPE_IIS" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_DB_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IP {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.IPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IP\' in table \'PT_SERVERSelectBySRV_SERVER_TYPE_IIS\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.IPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UsersCount {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.UsersCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UsersCount\' in table \'PT_SERVERSelectBySRV_SERVER_TYPE_IIS\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.UsersCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREG_DESCRIPTIONNull() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.REG_DESCRIPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREG_DESCRIPTIONNull() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.REG_DESCRIPTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREG_WEB_SITENull() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.REG_WEB_SITEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREG_WEB_SITENull() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.REG_WEB_SITEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHST_WEB_SITENull() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.HST_WEB_SITEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHST_WEB_SITENull() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.HST_WEB_SITEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_CONTROL_PANEL_1Null() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_HOST_CONTROL_PANEL_1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_CONTROL_PANEL_1Null() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_HOST_CONTROL_PANEL_1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_CONTROL_PANEL_2Null() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_HOST_CONTROL_PANEL_2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_CONTROL_PANEL_2Null() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_HOST_CONTROL_PANEL_2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_PDFNull() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_HOST_PDFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_PDFNull() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_HOST_PDFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_LOCATIONNull() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_HOST_LOCATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_LOCATIONNull() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_HOST_LOCATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_APP_POOL_URLNull() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_HOST_APP_POOL_URLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_APP_POOL_URLNull() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_HOST_APP_POOL_URLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_DB_DNSNull() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_DB_DNSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_DB_DNSNull() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_DB_DNSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_DB_CONTROL_PANELNull() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_DB_CONTROL_PANELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_DB_CONTROL_PANELNull() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_DB_CONTROL_PANELColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_DB_NAMENull() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_DB_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_DB_NAMENull() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.SRV_DB_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIPNull() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.IPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIPNull() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.IPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsersCountNull() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.UsersCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsersCountNull() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_IIS.UsersCountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PT_SERVERSelectBySRV_SERVER_TYPE_BLRow : global::System.Data.DataRow {
            
            private PT_SERVERSelectBySRV_SERVER_TYPE_BLDataTable tablePT_SERVERSelectBySRV_SERVER_TYPE_BL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PT_SERVERSelectBySRV_SERVER_TYPE_BLRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL = ((PT_SERVERSelectBySRV_SERVER_TYPE_BLDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SRV_ID {
                get {
                    return ((int)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_IDColumn]));
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRT_DESCRIPTION {
                get {
                    return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRT_DESCRIPTIONColumn]));
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRT_DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRT_PIC_URL {
                get {
                    return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRT_PIC_URLColumn]));
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRT_PIC_URLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REG_DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.REG_DESCRIPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REG_DESCRIPTION\' in table \'PT_SERVERSelectBySRV_SERVER_TYPE" +
                                "_BL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.REG_DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REG_WEB_SITE {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.REG_WEB_SITEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REG_WEB_SITE\' in table \'PT_SERVERSelectBySRV_SERVER_TYPE_BL" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.REG_WEB_SITEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_REG_DNS {
                get {
                    return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_REG_DNSColumn]));
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_REG_DNSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_REG_DNS_CONTROL_PANEL {
                get {
                    return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_REG_DNS_CONTROL_PANELColumn]));
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_REG_DNS_CONTROL_PANELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_REG_SUB_DOMAIN_NAME {
                get {
                    return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_REG_SUB_DOMAIN_NAMEColumn]));
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_REG_SUB_DOMAIN_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HST_DESCRIPTION {
                get {
                    return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.HST_DESCRIPTIONColumn]));
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.HST_DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HST_WEB_SITE {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.HST_WEB_SITEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HST_WEB_SITE\' in table \'PT_SERVERSelectBySRV_SERVER_TYPE_BL" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.HST_WEB_SITEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_CONTROL_PANEL_1 {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_HOST_CONTROL_PANEL_1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_CONTROL_PANEL_1\' in table \'PT_SERVERSelectBySRV_SE" +
                                "RVER_TYPE_BL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_HOST_CONTROL_PANEL_1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_CONTROL_PANEL_2 {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_HOST_CONTROL_PANEL_2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_CONTROL_PANEL_2\' in table \'PT_SERVERSelectBySRV_SE" +
                                "RVER_TYPE_BL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_HOST_CONTROL_PANEL_2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_PDF {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_HOST_PDFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_PDF\' in table \'PT_SERVERSelectBySRV_SERVER_TYPE_BL" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_HOST_PDFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_LOCATION {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_HOST_LOCATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_LOCATION\' in table \'PT_SERVERSelectBySRV_SERVER_TY" +
                                "PE_BL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_HOST_LOCATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SRV_HOST_LAT {
                get {
                    return ((decimal)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_HOST_LATColumn]));
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_HOST_LATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SRV_HOST_LNG {
                get {
                    return ((decimal)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_HOST_LNGColumn]));
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_HOST_LNGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_APP_POOL_URL {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_HOST_APP_POOL_URLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_APP_POOL_URL\' in table \'PT_SERVERSelectBySRV_SERVE" +
                                "R_TYPE_BL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_HOST_APP_POOL_URLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_DB_DNS {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_DB_DNSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_DB_DNS\' in table \'PT_SERVERSelectBySRV_SERVER_TYPE_BL\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_DB_DNSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_DB_CONTROL_PANEL {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_DB_CONTROL_PANELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_DB_CONTROL_PANEL\' in table \'PT_SERVERSelectBySRV_SERVER" +
                                "_TYPE_BL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_DB_CONTROL_PANELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_DB_NAME {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_DB_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_DB_NAME\' in table \'PT_SERVERSelectBySRV_SERVER_TYPE_BL\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_DB_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IP {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.IPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IP\' in table \'PT_SERVERSelectBySRV_SERVER_TYPE_BL\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.IPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UsersCount {
                get {
                    try {
                        return ((string)(this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.UsersCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UsersCount\' in table \'PT_SERVERSelectBySRV_SERVER_TYPE_BL\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.UsersCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREG_DESCRIPTIONNull() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.REG_DESCRIPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREG_DESCRIPTIONNull() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.REG_DESCRIPTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREG_WEB_SITENull() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.REG_WEB_SITEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREG_WEB_SITENull() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.REG_WEB_SITEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHST_WEB_SITENull() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.HST_WEB_SITEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHST_WEB_SITENull() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.HST_WEB_SITEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_CONTROL_PANEL_1Null() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_HOST_CONTROL_PANEL_1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_CONTROL_PANEL_1Null() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_HOST_CONTROL_PANEL_1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_CONTROL_PANEL_2Null() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_HOST_CONTROL_PANEL_2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_CONTROL_PANEL_2Null() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_HOST_CONTROL_PANEL_2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_PDFNull() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_HOST_PDFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_PDFNull() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_HOST_PDFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_LOCATIONNull() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_HOST_LOCATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_LOCATIONNull() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_HOST_LOCATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_APP_POOL_URLNull() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_HOST_APP_POOL_URLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_APP_POOL_URLNull() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_HOST_APP_POOL_URLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_DB_DNSNull() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_DB_DNSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_DB_DNSNull() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_DB_DNSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_DB_CONTROL_PANELNull() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_DB_CONTROL_PANELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_DB_CONTROL_PANELNull() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_DB_CONTROL_PANELColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_DB_NAMENull() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_DB_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_DB_NAMENull() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.SRV_DB_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIPNull() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.IPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIPNull() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.IPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsersCountNull() {
                return this.IsNull(this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.UsersCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsersCountNull() {
                this[this.tablePT_SERVERSelectBySRV_SERVER_TYPE_BL.UsersCountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class T_SERVERRow : global::System.Data.DataRow {
            
            private T_SERVERDataTable tableT_SERVER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal T_SERVERRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableT_SERVER = ((T_SERVERDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SRV_ID {
                get {
                    return ((int)(this[this.tableT_SERVER.SRV_IDColumn]));
                }
                set {
                    this[this.tableT_SERVER.SRV_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SRV_SERVER_TYPE {
                get {
                    return ((int)(this[this.tableT_SERVER.SRV_SERVER_TYPEColumn]));
                }
                set {
                    this[this.tableT_SERVER.SRV_SERVER_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SRV_IS_SSL {
                get {
                    return ((bool)(this[this.tableT_SERVER.SRV_IS_SSLColumn]));
                }
                set {
                    this[this.tableT_SERVER.SRV_IS_SSLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SRV_REG_CODE {
                get {
                    return ((int)(this[this.tableT_SERVER.SRV_REG_CODEColumn]));
                }
                set {
                    this[this.tableT_SERVER.SRV_REG_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_REG_DNS {
                get {
                    return ((string)(this[this.tableT_SERVER.SRV_REG_DNSColumn]));
                }
                set {
                    this[this.tableT_SERVER.SRV_REG_DNSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_REG_DNS_COST {
                get {
                    return ((string)(this[this.tableT_SERVER.SRV_REG_DNS_COSTColumn]));
                }
                set {
                    this[this.tableT_SERVER.SRV_REG_DNS_COSTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_REG_DNS_CONTROL_PANEL {
                get {
                    return ((string)(this[this.tableT_SERVER.SRV_REG_DNS_CONTROL_PANELColumn]));
                }
                set {
                    this[this.tableT_SERVER.SRV_REG_DNS_CONTROL_PANELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_REG_SUB_DOMAIN_NAME {
                get {
                    return ((string)(this[this.tableT_SERVER.SRV_REG_SUB_DOMAIN_NAMEColumn]));
                }
                set {
                    this[this.tableT_SERVER.SRV_REG_SUB_DOMAIN_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SRV_HOST_CODE {
                get {
                    return ((int)(this[this.tableT_SERVER.SRV_HOST_CODEColumn]));
                }
                set {
                    this[this.tableT_SERVER.SRV_HOST_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_COST {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER.SRV_HOST_COSTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_COST\' in table \'T_SERVER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER.SRV_HOST_COSTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_CONTROL_PANEL_1 {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER.SRV_HOST_CONTROL_PANEL_1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_CONTROL_PANEL_1\' in table \'T_SERVER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER.SRV_HOST_CONTROL_PANEL_1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_CONTROL_PANEL_2 {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER.SRV_HOST_CONTROL_PANEL_2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_CONTROL_PANEL_2\' in table \'T_SERVER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER.SRV_HOST_CONTROL_PANEL_2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_PDF {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER.SRV_HOST_PDFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_PDF\' in table \'T_SERVER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER.SRV_HOST_PDFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_LOCATION {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER.SRV_HOST_LOCATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_LOCATION\' in table \'T_SERVER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER.SRV_HOST_LOCATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SRV_HOST_LAT {
                get {
                    return ((decimal)(this[this.tableT_SERVER.SRV_HOST_LATColumn]));
                }
                set {
                    this[this.tableT_SERVER.SRV_HOST_LATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SRV_HOST_LNG {
                get {
                    return ((decimal)(this[this.tableT_SERVER.SRV_HOST_LNGColumn]));
                }
                set {
                    this[this.tableT_SERVER.SRV_HOST_LNGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_APP_POOL_URL {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER.SRV_HOST_APP_POOL_URLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_APP_POOL_URL\' in table \'T_SERVER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER.SRV_HOST_APP_POOL_URLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_DB_COST {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER.SRV_DB_COSTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_DB_COST\' in table \'T_SERVER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER.SRV_DB_COSTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_DB_CONTROL_PANEL {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER.SRV_DB_CONTROL_PANELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_DB_CONTROL_PANEL\' in table \'T_SERVER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER.SRV_DB_CONTROL_PANELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_DB_DNS {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER.SRV_DB_DNSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_DB_DNS\' in table \'T_SERVER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER.SRV_DB_DNSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_DB_NAME {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER.SRV_DB_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_DB_NAME\' in table \'T_SERVER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER.SRV_DB_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_COSTNull() {
                return this.IsNull(this.tableT_SERVER.SRV_HOST_COSTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_COSTNull() {
                this[this.tableT_SERVER.SRV_HOST_COSTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_CONTROL_PANEL_1Null() {
                return this.IsNull(this.tableT_SERVER.SRV_HOST_CONTROL_PANEL_1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_CONTROL_PANEL_1Null() {
                this[this.tableT_SERVER.SRV_HOST_CONTROL_PANEL_1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_CONTROL_PANEL_2Null() {
                return this.IsNull(this.tableT_SERVER.SRV_HOST_CONTROL_PANEL_2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_CONTROL_PANEL_2Null() {
                this[this.tableT_SERVER.SRV_HOST_CONTROL_PANEL_2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_PDFNull() {
                return this.IsNull(this.tableT_SERVER.SRV_HOST_PDFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_PDFNull() {
                this[this.tableT_SERVER.SRV_HOST_PDFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_LOCATIONNull() {
                return this.IsNull(this.tableT_SERVER.SRV_HOST_LOCATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_LOCATIONNull() {
                this[this.tableT_SERVER.SRV_HOST_LOCATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_APP_POOL_URLNull() {
                return this.IsNull(this.tableT_SERVER.SRV_HOST_APP_POOL_URLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_APP_POOL_URLNull() {
                this[this.tableT_SERVER.SRV_HOST_APP_POOL_URLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_DB_COSTNull() {
                return this.IsNull(this.tableT_SERVER.SRV_DB_COSTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_DB_COSTNull() {
                this[this.tableT_SERVER.SRV_DB_COSTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_DB_CONTROL_PANELNull() {
                return this.IsNull(this.tableT_SERVER.SRV_DB_CONTROL_PANELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_DB_CONTROL_PANELNull() {
                this[this.tableT_SERVER.SRV_DB_CONTROL_PANELColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_DB_DNSNull() {
                return this.IsNull(this.tableT_SERVER.SRV_DB_DNSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_DB_DNSNull() {
                this[this.tableT_SERVER.SRV_DB_DNSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_DB_NAMENull() {
                return this.IsNull(this.tableT_SERVER.SRV_DB_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_DB_NAMENull() {
                this[this.tableT_SERVER.SRV_DB_NAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class T_SERVER_IISRow : global::System.Data.DataRow {
            
            private T_SERVER_IISDataTable tableT_SERVER_IIS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal T_SERVER_IISRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableT_SERVER_IIS = ((T_SERVER_IISDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SRV_ID {
                get {
                    return ((int)(this[this.tableT_SERVER_IIS.SRV_IDColumn]));
                }
                set {
                    this[this.tableT_SERVER_IIS.SRV_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SRV_SERVER_TYPE {
                get {
                    return ((int)(this[this.tableT_SERVER_IIS.SRV_SERVER_TYPEColumn]));
                }
                set {
                    this[this.tableT_SERVER_IIS.SRV_SERVER_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SRV_IS_SSL {
                get {
                    return ((bool)(this[this.tableT_SERVER_IIS.SRV_IS_SSLColumn]));
                }
                set {
                    this[this.tableT_SERVER_IIS.SRV_IS_SSLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SRV_REG_CODE {
                get {
                    return ((int)(this[this.tableT_SERVER_IIS.SRV_REG_CODEColumn]));
                }
                set {
                    this[this.tableT_SERVER_IIS.SRV_REG_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_REG_DNS {
                get {
                    return ((string)(this[this.tableT_SERVER_IIS.SRV_REG_DNSColumn]));
                }
                set {
                    this[this.tableT_SERVER_IIS.SRV_REG_DNSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_REG_DNS_COST {
                get {
                    return ((string)(this[this.tableT_SERVER_IIS.SRV_REG_DNS_COSTColumn]));
                }
                set {
                    this[this.tableT_SERVER_IIS.SRV_REG_DNS_COSTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_REG_DNS_CONTROL_PANEL {
                get {
                    return ((string)(this[this.tableT_SERVER_IIS.SRV_REG_DNS_CONTROL_PANELColumn]));
                }
                set {
                    this[this.tableT_SERVER_IIS.SRV_REG_DNS_CONTROL_PANELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_REG_SUB_DOMAIN_NAME {
                get {
                    return ((string)(this[this.tableT_SERVER_IIS.SRV_REG_SUB_DOMAIN_NAMEColumn]));
                }
                set {
                    this[this.tableT_SERVER_IIS.SRV_REG_SUB_DOMAIN_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SRV_HOST_CODE {
                get {
                    return ((int)(this[this.tableT_SERVER_IIS.SRV_HOST_CODEColumn]));
                }
                set {
                    this[this.tableT_SERVER_IIS.SRV_HOST_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_COST {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER_IIS.SRV_HOST_COSTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_COST\' in table \'T_SERVER_IIS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER_IIS.SRV_HOST_COSTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_CONTROL_PANEL_1 {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER_IIS.SRV_HOST_CONTROL_PANEL_1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_CONTROL_PANEL_1\' in table \'T_SERVER_IIS\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableT_SERVER_IIS.SRV_HOST_CONTROL_PANEL_1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_CONTROL_PANEL_2 {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER_IIS.SRV_HOST_CONTROL_PANEL_2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_CONTROL_PANEL_2\' in table \'T_SERVER_IIS\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableT_SERVER_IIS.SRV_HOST_CONTROL_PANEL_2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_PDF {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER_IIS.SRV_HOST_PDFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_PDF\' in table \'T_SERVER_IIS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER_IIS.SRV_HOST_PDFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_LOCATION {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER_IIS.SRV_HOST_LOCATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_LOCATION\' in table \'T_SERVER_IIS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER_IIS.SRV_HOST_LOCATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SRV_HOST_LAT {
                get {
                    return ((decimal)(this[this.tableT_SERVER_IIS.SRV_HOST_LATColumn]));
                }
                set {
                    this[this.tableT_SERVER_IIS.SRV_HOST_LATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SRV_HOST_LNG {
                get {
                    return ((decimal)(this[this.tableT_SERVER_IIS.SRV_HOST_LNGColumn]));
                }
                set {
                    this[this.tableT_SERVER_IIS.SRV_HOST_LNGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_APP_POOL_URL {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER_IIS.SRV_HOST_APP_POOL_URLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_APP_POOL_URL\' in table \'T_SERVER_IIS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER_IIS.SRV_HOST_APP_POOL_URLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_DB_COST {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER_IIS.SRV_DB_COSTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_DB_COST\' in table \'T_SERVER_IIS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER_IIS.SRV_DB_COSTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_DB_CONTROL_PANEL {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER_IIS.SRV_DB_CONTROL_PANELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_DB_CONTROL_PANEL\' in table \'T_SERVER_IIS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER_IIS.SRV_DB_CONTROL_PANELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_DB_DNS {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER_IIS.SRV_DB_DNSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_DB_DNS\' in table \'T_SERVER_IIS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER_IIS.SRV_DB_DNSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_DB_NAME {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER_IIS.SRV_DB_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_DB_NAME\' in table \'T_SERVER_IIS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER_IIS.SRV_DB_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_COSTNull() {
                return this.IsNull(this.tableT_SERVER_IIS.SRV_HOST_COSTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_COSTNull() {
                this[this.tableT_SERVER_IIS.SRV_HOST_COSTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_CONTROL_PANEL_1Null() {
                return this.IsNull(this.tableT_SERVER_IIS.SRV_HOST_CONTROL_PANEL_1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_CONTROL_PANEL_1Null() {
                this[this.tableT_SERVER_IIS.SRV_HOST_CONTROL_PANEL_1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_CONTROL_PANEL_2Null() {
                return this.IsNull(this.tableT_SERVER_IIS.SRV_HOST_CONTROL_PANEL_2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_CONTROL_PANEL_2Null() {
                this[this.tableT_SERVER_IIS.SRV_HOST_CONTROL_PANEL_2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_PDFNull() {
                return this.IsNull(this.tableT_SERVER_IIS.SRV_HOST_PDFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_PDFNull() {
                this[this.tableT_SERVER_IIS.SRV_HOST_PDFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_LOCATIONNull() {
                return this.IsNull(this.tableT_SERVER_IIS.SRV_HOST_LOCATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_LOCATIONNull() {
                this[this.tableT_SERVER_IIS.SRV_HOST_LOCATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_APP_POOL_URLNull() {
                return this.IsNull(this.tableT_SERVER_IIS.SRV_HOST_APP_POOL_URLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_APP_POOL_URLNull() {
                this[this.tableT_SERVER_IIS.SRV_HOST_APP_POOL_URLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_DB_COSTNull() {
                return this.IsNull(this.tableT_SERVER_IIS.SRV_DB_COSTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_DB_COSTNull() {
                this[this.tableT_SERVER_IIS.SRV_DB_COSTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_DB_CONTROL_PANELNull() {
                return this.IsNull(this.tableT_SERVER_IIS.SRV_DB_CONTROL_PANELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_DB_CONTROL_PANELNull() {
                this[this.tableT_SERVER_IIS.SRV_DB_CONTROL_PANELColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_DB_DNSNull() {
                return this.IsNull(this.tableT_SERVER_IIS.SRV_DB_DNSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_DB_DNSNull() {
                this[this.tableT_SERVER_IIS.SRV_DB_DNSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_DB_NAMENull() {
                return this.IsNull(this.tableT_SERVER_IIS.SRV_DB_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_DB_NAMENull() {
                this[this.tableT_SERVER_IIS.SRV_DB_NAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class T_SERVER_BLRow : global::System.Data.DataRow {
            
            private T_SERVER_BLDataTable tableT_SERVER_BL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal T_SERVER_BLRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableT_SERVER_BL = ((T_SERVER_BLDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SRV_ID {
                get {
                    return ((int)(this[this.tableT_SERVER_BL.SRV_IDColumn]));
                }
                set {
                    this[this.tableT_SERVER_BL.SRV_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SRV_SERVER_TYPE {
                get {
                    return ((int)(this[this.tableT_SERVER_BL.SRV_SERVER_TYPEColumn]));
                }
                set {
                    this[this.tableT_SERVER_BL.SRV_SERVER_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SRV_IS_SSL {
                get {
                    return ((bool)(this[this.tableT_SERVER_BL.SRV_IS_SSLColumn]));
                }
                set {
                    this[this.tableT_SERVER_BL.SRV_IS_SSLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SRV_REG_CODE {
                get {
                    return ((int)(this[this.tableT_SERVER_BL.SRV_REG_CODEColumn]));
                }
                set {
                    this[this.tableT_SERVER_BL.SRV_REG_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_REG_DNS {
                get {
                    return ((string)(this[this.tableT_SERVER_BL.SRV_REG_DNSColumn]));
                }
                set {
                    this[this.tableT_SERVER_BL.SRV_REG_DNSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_REG_DNS_COST {
                get {
                    return ((string)(this[this.tableT_SERVER_BL.SRV_REG_DNS_COSTColumn]));
                }
                set {
                    this[this.tableT_SERVER_BL.SRV_REG_DNS_COSTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_REG_DNS_CONTROL_PANEL {
                get {
                    return ((string)(this[this.tableT_SERVER_BL.SRV_REG_DNS_CONTROL_PANELColumn]));
                }
                set {
                    this[this.tableT_SERVER_BL.SRV_REG_DNS_CONTROL_PANELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_REG_SUB_DOMAIN_NAME {
                get {
                    return ((string)(this[this.tableT_SERVER_BL.SRV_REG_SUB_DOMAIN_NAMEColumn]));
                }
                set {
                    this[this.tableT_SERVER_BL.SRV_REG_SUB_DOMAIN_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SRV_HOST_CODE {
                get {
                    return ((int)(this[this.tableT_SERVER_BL.SRV_HOST_CODEColumn]));
                }
                set {
                    this[this.tableT_SERVER_BL.SRV_HOST_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_COST {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER_BL.SRV_HOST_COSTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_COST\' in table \'T_SERVER_BL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER_BL.SRV_HOST_COSTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_CONTROL_PANEL_1 {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER_BL.SRV_HOST_CONTROL_PANEL_1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_CONTROL_PANEL_1\' in table \'T_SERVER_BL\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableT_SERVER_BL.SRV_HOST_CONTROL_PANEL_1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_CONTROL_PANEL_2 {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER_BL.SRV_HOST_CONTROL_PANEL_2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_CONTROL_PANEL_2\' in table \'T_SERVER_BL\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableT_SERVER_BL.SRV_HOST_CONTROL_PANEL_2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_PDF {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER_BL.SRV_HOST_PDFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_PDF\' in table \'T_SERVER_BL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER_BL.SRV_HOST_PDFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_LOCATION {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER_BL.SRV_HOST_LOCATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_LOCATION\' in table \'T_SERVER_BL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER_BL.SRV_HOST_LOCATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SRV_HOST_LAT {
                get {
                    return ((decimal)(this[this.tableT_SERVER_BL.SRV_HOST_LATColumn]));
                }
                set {
                    this[this.tableT_SERVER_BL.SRV_HOST_LATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SRV_HOST_LNG {
                get {
                    return ((decimal)(this[this.tableT_SERVER_BL.SRV_HOST_LNGColumn]));
                }
                set {
                    this[this.tableT_SERVER_BL.SRV_HOST_LNGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_HOST_APP_POOL_URL {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER_BL.SRV_HOST_APP_POOL_URLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_HOST_APP_POOL_URL\' in table \'T_SERVER_BL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER_BL.SRV_HOST_APP_POOL_URLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_DB_COST {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER_BL.SRV_DB_COSTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_DB_COST\' in table \'T_SERVER_BL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER_BL.SRV_DB_COSTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_DB_CONTROL_PANEL {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER_BL.SRV_DB_CONTROL_PANELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_DB_CONTROL_PANEL\' in table \'T_SERVER_BL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER_BL.SRV_DB_CONTROL_PANELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_DB_DNS {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER_BL.SRV_DB_DNSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_DB_DNS\' in table \'T_SERVER_BL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER_BL.SRV_DB_DNSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRV_DB_NAME {
                get {
                    try {
                        return ((string)(this[this.tableT_SERVER_BL.SRV_DB_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRV_DB_NAME\' in table \'T_SERVER_BL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_SERVER_BL.SRV_DB_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_COSTNull() {
                return this.IsNull(this.tableT_SERVER_BL.SRV_HOST_COSTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_COSTNull() {
                this[this.tableT_SERVER_BL.SRV_HOST_COSTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_CONTROL_PANEL_1Null() {
                return this.IsNull(this.tableT_SERVER_BL.SRV_HOST_CONTROL_PANEL_1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_CONTROL_PANEL_1Null() {
                this[this.tableT_SERVER_BL.SRV_HOST_CONTROL_PANEL_1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_CONTROL_PANEL_2Null() {
                return this.IsNull(this.tableT_SERVER_BL.SRV_HOST_CONTROL_PANEL_2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_CONTROL_PANEL_2Null() {
                this[this.tableT_SERVER_BL.SRV_HOST_CONTROL_PANEL_2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_PDFNull() {
                return this.IsNull(this.tableT_SERVER_BL.SRV_HOST_PDFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_PDFNull() {
                this[this.tableT_SERVER_BL.SRV_HOST_PDFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_LOCATIONNull() {
                return this.IsNull(this.tableT_SERVER_BL.SRV_HOST_LOCATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_LOCATIONNull() {
                this[this.tableT_SERVER_BL.SRV_HOST_LOCATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_HOST_APP_POOL_URLNull() {
                return this.IsNull(this.tableT_SERVER_BL.SRV_HOST_APP_POOL_URLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_HOST_APP_POOL_URLNull() {
                this[this.tableT_SERVER_BL.SRV_HOST_APP_POOL_URLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_DB_COSTNull() {
                return this.IsNull(this.tableT_SERVER_BL.SRV_DB_COSTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_DB_COSTNull() {
                this[this.tableT_SERVER_BL.SRV_DB_COSTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_DB_CONTROL_PANELNull() {
                return this.IsNull(this.tableT_SERVER_BL.SRV_DB_CONTROL_PANELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_DB_CONTROL_PANELNull() {
                this[this.tableT_SERVER_BL.SRV_DB_CONTROL_PANELColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_DB_DNSNull() {
                return this.IsNull(this.tableT_SERVER_BL.SRV_DB_DNSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_DB_DNSNull() {
                this[this.tableT_SERVER_BL.SRV_DB_DNSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRV_DB_NAMENull() {
                return this.IsNull(this.tableT_SERVER_BL.SRV_DB_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRV_DB_NAMENull() {
                this[this.tableT_SERVER_BL.SRV_DB_NAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class T_FB_LOCALE_TYPERow : global::System.Data.DataRow {
            
            private T_FB_LOCALE_TYPEDataTable tableT_FB_LOCALE_TYPE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal T_FB_LOCALE_TYPERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableT_FB_LOCALE_TYPE = ((T_FB_LOCALE_TYPEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FBL_CODE {
                get {
                    return ((int)(this[this.tableT_FB_LOCALE_TYPE.FBL_CODEColumn]));
                }
                set {
                    this[this.tableT_FB_LOCALE_TYPE.FBL_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FBL_FB_LOCALE {
                get {
                    try {
                        return ((string)(this[this.tableT_FB_LOCALE_TYPE.FBL_FB_LOCALEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FBL_FB_LOCALE\' in table \'T_FB_LOCALE_TYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_FB_LOCALE_TYPE.FBL_FB_LOCALEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FBL_LOCALE {
                get {
                    try {
                        return ((string)(this[this.tableT_FB_LOCALE_TYPE.FBL_LOCALEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FBL_LOCALE\' in table \'T_FB_LOCALE_TYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_FB_LOCALE_TYPE.FBL_LOCALEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFBL_FB_LOCALENull() {
                return this.IsNull(this.tableT_FB_LOCALE_TYPE.FBL_FB_LOCALEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFBL_FB_LOCALENull() {
                this[this.tableT_FB_LOCALE_TYPE.FBL_FB_LOCALEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFBL_LOCALENull() {
                return this.IsNull(this.tableT_FB_LOCALE_TYPE.FBL_LOCALEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFBL_LOCALENull() {
                this[this.tableT_FB_LOCALE_TYPE.FBL_LOCALEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class T_IP_LAT_LNGRowChangeEvent : global::System.EventArgs {
            
            private T_IP_LAT_LNGRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IP_LAT_LNGRowChangeEvent(T_IP_LAT_LNGRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IP_LAT_LNGRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class T_IP_LAT_LNG_ValidateRowChangeEvent : global::System.EventArgs {
            
            private T_IP_LAT_LNG_ValidateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IP_LAT_LNG_ValidateRowChangeEvent(T_IP_LAT_LNG_ValidateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IP_LAT_LNG_ValidateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class T_REGISTERRowChangeEvent : global::System.EventArgs {
            
            private T_REGISTERRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_REGISTERRowChangeEvent(T_REGISTERRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_REGISTERRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class T_HOSTINGRowChangeEvent : global::System.EventArgs {
            
            private T_HOSTINGRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_HOSTINGRowChangeEvent(T_HOSTINGRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_HOSTINGRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PT_SERVERSelectBySRV_SERVER_TYPE_IISRowChangeEvent : global::System.EventArgs {
            
            private PT_SERVERSelectBySRV_SERVER_TYPE_IISRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_SERVERSelectBySRV_SERVER_TYPE_IISRowChangeEvent(PT_SERVERSelectBySRV_SERVER_TYPE_IISRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_SERVERSelectBySRV_SERVER_TYPE_IISRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PT_SERVERSelectBySRV_SERVER_TYPE_BLRowChangeEvent : global::System.EventArgs {
            
            private PT_SERVERSelectBySRV_SERVER_TYPE_BLRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_SERVERSelectBySRV_SERVER_TYPE_BLRowChangeEvent(PT_SERVERSelectBySRV_SERVER_TYPE_BLRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_SERVERSelectBySRV_SERVER_TYPE_BLRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class T_SERVERRowChangeEvent : global::System.EventArgs {
            
            private T_SERVERRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_SERVERRowChangeEvent(T_SERVERRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_SERVERRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class T_SERVER_IISRowChangeEvent : global::System.EventArgs {
            
            private T_SERVER_IISRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_SERVER_IISRowChangeEvent(T_SERVER_IISRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_SERVER_IISRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class T_SERVER_BLRowChangeEvent : global::System.EventArgs {
            
            private T_SERVER_BLRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_SERVER_BLRowChangeEvent(T_SERVER_BLRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_SERVER_BLRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class T_FB_LOCALE_TYPERowChangeEvent : global::System.EventArgs {
            
            private T_FB_LOCALE_TYPERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_FB_LOCALE_TYPERowChangeEvent(T_FB_LOCALE_TYPERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_FB_LOCALE_TYPERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591