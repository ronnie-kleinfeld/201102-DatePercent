//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by the Database Schema tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
//
//     Exception should be handled in a higher layer.
//
//     generation time: 29/03/2012 14:43
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using Microsoft.Practices.EnterpriseLibrary.Logging;

namespace MADA.DatePercent.BB.Storage.DBS
{
public class Tools
{
#region Methods
internal static SqlParameter CreateSqlParameterValueType(
string p_strParameterName, int p_iPrecision, int p_iScale, int p_iSize, SqlDbType p_oSqlDbType, string p_strDotNetDataTypeName, ParameterDirection p_oDirection, bool p_bIsNullable, bool p_bDefaultValueExists, string p_strSysCommentsText)
{
SqlParameter oSqlParameter = CreateSqlParameter(p_strParameterName, p_iPrecision, p_iScale, p_iSize, p_oSqlDbType, p_oDirection, p_bIsNullable);
oSqlParameter.Value = System.DBNull.Value;
return oSqlParameter;
}
internal static SqlParameter CreateSqlParameterValueType(
string p_strParameterName, int p_iPrecision, int p_iScale, int p_iSize, SqlDbType p_oSqlDbType, string p_strDotNetDataTypeName, ParameterDirection p_oDirection, bool p_bIsNullable, bool p_bDefaultValueExists, string p_strSysCommentsText,
object Value)
{
SqlParameter oSqlParameter = CreateSqlParameter(p_strParameterName, p_iPrecision, p_iScale, p_iSize, p_oSqlDbType, p_oDirection, p_bIsNullable);
oSqlParameter.Value = Value;
return oSqlParameter;
}
internal static SqlParameter CreateSqlParameterReferenceType(
string p_strParameterName, int p_iPrecision, int p_iScale, int p_iSize, SqlDbType p_oSqlDbType, string p_strDotNetDataTypeName, ParameterDirection p_oDirection, bool p_bIsNullable, bool p_bDefaultValueExists, string p_strSysCommentsText)
{
SqlParameter oSqlParameter = CreateSqlParameter(p_strParameterName, p_iPrecision, p_iScale, p_iSize, p_oSqlDbType, p_oDirection, p_bIsNullable);
oSqlParameter.Value = System.DBNull.Value;
return oSqlParameter;
}
internal static SqlParameter CreateSqlParameterReferenceType(
string p_strParameterName, int p_iPrecision, int p_iScale, int p_iSize, SqlDbType p_oSqlDbType, string p_strDotNetDataTypeName, ParameterDirection p_oDirection, bool p_bIsNullable, bool p_bDefaultValueExists, string p_strSysCommentsText,
object Value)
{
SqlParameter oSqlParameter = CreateSqlParameter(p_strParameterName, p_iPrecision, p_iScale, p_iSize, p_oSqlDbType, p_oDirection, p_bIsNullable);
if (Value == null)
{
if (p_bIsNullable)
{
oSqlParameter.Value = System.DBNull.Value;
}
else
{
if (p_bDefaultValueExists)
{
oSqlParameter.Value = EvaluateDefaultValue(p_strSysCommentsText);
}
else
{
oSqlParameter.Value = CSharpDataTypeDefaultValue(p_strDotNetDataTypeName);
}
}
}
else
{
oSqlParameter.Value = Value;
}
return oSqlParameter;
}
internal static SqlParameter CreateSqlParameter(
string p_strParameterName, int p_iPrecision, int p_iScale, int p_iSize, SqlDbType p_oSqlDbType, ParameterDirection p_oDirection, bool p_bIsNullable)
{
SqlParameter oSqlParameter = new SqlParameter();
oSqlParameter.ParameterName = p_strParameterName;
oSqlParameter.SqlDbType = p_oSqlDbType;
if (p_oSqlDbType != SqlDbType.Image)
{
if (p_oSqlDbType == SqlDbType.Decimal)
{
oSqlParameter.Precision = (byte)p_iPrecision;
oSqlParameter.Scale = (byte)p_iScale;
}
oSqlParameter.Size = p_iSize;
oSqlParameter.Direction = p_oDirection;
oSqlParameter.IsNullable = p_bIsNullable;
}
return oSqlParameter;
}
internal static object EvaluateDefaultValue(string p_strSysColumnCDefault)
{
object oDefaultValue = null;
System.Data.SqlClient.SqlConnection con =
new System.Data.SqlClient.SqlConnection();
try
{
//con.ConnectionString = Utilities.Data.SQLClient.Connection.WebFormsConnectionString;
con.Open();
SqlCommand cmd = new SqlCommand();
cmd.Connection = con;
cmd.CommandText = "select " + p_strSysColumnCDefault;
oDefaultValue = cmd.ExecuteScalar();
}
catch
{
oDefaultValue = System.DBNull.Value;
}
finally
{
if (con.State == System.Data.ConnectionState.Open)
{
con.Close();
}
}
return oDefaultValue;
}
internal static object CSharpDataTypeDefaultValue(string p_strCSharpDataTypeName)
{
switch (p_strCSharpDataTypeName)
{
case "bool":
return (bool)false;
case "int":
return (int)0;
case "long":
return (long)0;
case "object":
return (object)null;
case "short":
return (short)0;
case "string":
return (string)string.Empty;
case "byte":
return (byte)0;
case "byte[]":
return (byte[])null;
case "DateTime":
return null;
case "decimal":
return (decimal)0;
case "double":
return (double)0;
case "single":
return (Single)0;
default:
throw new NotImplementedException();
}
}
#endregion
#region Logger
public static string WriteToLog(System.Exception p_ex, System.Reflection.MethodBase p_oMethodBase)
{
System.Guid guid = System.Guid.NewGuid();

LogEntry logEntry = new LogEntry();
logEntry.Message = p_ex.Message;
logEntry.Categories.Add("3");
logEntry.Priority = 3;
logEntry.Severity = System.Diagnostics.TraceEventType.Critical;
logEntry.ExtendedProperties.Add("Error ID", guid.ToString());
logEntry.ExtendedProperties.Add("Namespace", p_oMethodBase.DeclaringType.Namespace);
logEntry.ExtendedProperties.Add("Class Name", p_oMethodBase.DeclaringType.Name);
logEntry.ExtendedProperties.Add("Method Name", p_oMethodBase.Name);
logEntry.ExtendedProperties.Add("Parameters", p_oMethodBase.GetParameters());
logEntry.ExtendedProperties.Add("Exception Data", p_ex.Data);
logEntry.ExtendedProperties.Add("Exception StackTrace", p_ex.StackTrace);
Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Write(logEntry);

return guid.ToString();
}
#endregion
}
}
