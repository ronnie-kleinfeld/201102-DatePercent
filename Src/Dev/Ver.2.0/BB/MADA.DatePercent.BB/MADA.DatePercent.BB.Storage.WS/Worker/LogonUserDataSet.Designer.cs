//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MADA.DatePercent.BB.Storage.WS.Worker {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("LogonUserDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class LogonUserDataSet : global::System.Data.DataSet {
        
        private PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersDataTable tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers;
        
        private PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsDataTable tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNews;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LogonUserDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected LogonUserDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers"] != null)) {
                    base.Tables.Add(new PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersDataTable(ds.Tables["PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers"]));
                }
                if ((ds.Tables["PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNews"] != null)) {
                    base.Tables.Add(new PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsDataTable(ds.Tables["PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNews"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersDataTable PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers {
            get {
                return this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsDataTable PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNews {
            get {
                return this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNews;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            LogonUserDataSet cln = ((LogonUserDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers"] != null)) {
                    base.Tables.Add(new PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersDataTable(ds.Tables["PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers"]));
                }
                if ((ds.Tables["PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNews"] != null)) {
                    base.Tables.Add(new PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsDataTable(ds.Tables["PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNews"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers = ((PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersDataTable)(base.Tables["PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers"]));
            if ((initTable == true)) {
                if ((this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers != null)) {
                    this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.InitVars();
                }
            }
            this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNews = ((PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsDataTable)(base.Tables["PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNews"]));
            if ((initTable == true)) {
                if ((this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNews != null)) {
                    this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNews.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "LogonUserDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/LogonUserDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers = new PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersDataTable();
            base.Tables.Add(this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers);
            this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNews = new PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsDataTable();
            base.Tables.Add(this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNews);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNews() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            LogonUserDataSet ds = new LogonUserDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRowChangeEventHandler(object sender, PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRowChangeEvent e);
        
        public delegate void PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRowChangeEventHandler(object sender, PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUSL_ID;
            
            private global::System.Data.DataColumn columnUSL_FETCHED_LOGON_ID;
            
            private global::System.Data.DataColumn columnUSR_ID;
            
            private global::System.Data.DataColumn columnUSR_SEX_CODE;
            
            private global::System.Data.DataColumn columnUSR_LAT;
            
            private global::System.Data.DataColumn columnUSR_LNG;
            
            private global::System.Data.DataColumn columnUSR_RADIUS_KM;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersDataTable() {
                this.TableName = "PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USL_IDColumn {
                get {
                    return this.columnUSL_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USL_FETCHED_LOGON_IDColumn {
                get {
                    return this.columnUSL_FETCHED_LOGON_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USR_IDColumn {
                get {
                    return this.columnUSR_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USR_SEX_CODEColumn {
                get {
                    return this.columnUSR_SEX_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USR_LATColumn {
                get {
                    return this.columnUSR_LAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USR_LNGColumn {
                get {
                    return this.columnUSR_LNG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USR_RADIUS_KMColumn {
                get {
                    return this.columnUSR_RADIUS_KM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow this[int index] {
                get {
                    return ((PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow)(this.Rows[index]));
                }
            }
            
            public event PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRowChangeEventHandler PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRowChanging;
            
            public event PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRowChangeEventHandler PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRowChanged;
            
            public event PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRowChangeEventHandler PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRowDeleting;
            
            public event PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRowChangeEventHandler PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow(PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow AddPT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow(int USL_FETCHED_LOGON_ID, int USR_SEX_CODE, decimal USR_LAT, decimal USR_LNG, int USR_RADIUS_KM) {
                PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow rowPT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow = ((PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        USL_FETCHED_LOGON_ID,
                        null,
                        USR_SEX_CODE,
                        USR_LAT,
                        USR_LNG,
                        USR_RADIUS_KM};
                rowPT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow);
                return rowPT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersDataTable cln = ((PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUSL_ID = base.Columns["USL_ID"];
                this.columnUSL_FETCHED_LOGON_ID = base.Columns["USL_FETCHED_LOGON_ID"];
                this.columnUSR_ID = base.Columns["USR_ID"];
                this.columnUSR_SEX_CODE = base.Columns["USR_SEX_CODE"];
                this.columnUSR_LAT = base.Columns["USR_LAT"];
                this.columnUSR_LNG = base.Columns["USR_LNG"];
                this.columnUSR_RADIUS_KM = base.Columns["USR_RADIUS_KM"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUSL_ID = new global::System.Data.DataColumn("USL_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSL_ID);
                this.columnUSL_FETCHED_LOGON_ID = new global::System.Data.DataColumn("USL_FETCHED_LOGON_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSL_FETCHED_LOGON_ID);
                this.columnUSR_ID = new global::System.Data.DataColumn("USR_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSR_ID);
                this.columnUSR_SEX_CODE = new global::System.Data.DataColumn("USR_SEX_CODE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSR_SEX_CODE);
                this.columnUSR_LAT = new global::System.Data.DataColumn("USR_LAT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSR_LAT);
                this.columnUSR_LNG = new global::System.Data.DataColumn("USR_LNG", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSR_LNG);
                this.columnUSR_RADIUS_KM = new global::System.Data.DataColumn("USR_RADIUS_KM", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSR_RADIUS_KM);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUSL_ID,
                                this.columnUSR_ID}, false));
                this.columnUSL_ID.AutoIncrement = true;
                this.columnUSL_ID.AllowDBNull = false;
                this.columnUSL_ID.ReadOnly = true;
                this.columnUSL_FETCHED_LOGON_ID.AllowDBNull = false;
                this.columnUSR_ID.AutoIncrement = true;
                this.columnUSR_ID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow NewPT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow() {
                return ((PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRowChanged != null)) {
                    this.PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRowChanged(this, new PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRowChangeEvent(((PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRowChanging != null)) {
                    this.PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRowChanging(this, new PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRowChangeEvent(((PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRowDeleted != null)) {
                    this.PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRowDeleted(this, new PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRowChangeEvent(((PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRowDeleting != null)) {
                    this.PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRowDeleting(this, new PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRowChangeEvent(((PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow(PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                LogonUserDataSet ds = new LogonUserDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCounter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsDataTable() {
                this.TableName = "PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNews";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CounterColumn {
                get {
                    return this.columnCounter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow this[int index] {
                get {
                    return ((PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow)(this.Rows[index]));
                }
            }
            
            public event PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRowChangeEventHandler PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRowChanging;
            
            public event PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRowChangeEventHandler PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRowChanged;
            
            public event PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRowChangeEventHandler PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRowDeleting;
            
            public event PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRowChangeEventHandler PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow(PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow AddPT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow(int Counter) {
                PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow rowPT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow = ((PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Counter};
                rowPT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow);
                return rowPT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsDataTable cln = ((PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCounter = base.Columns["Counter"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCounter = new global::System.Data.DataColumn("Counter", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCounter);
                this.columnCounter.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow NewPT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow() {
                return ((PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRowChanged != null)) {
                    this.PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRowChanged(this, new PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRowChangeEvent(((PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRowChanging != null)) {
                    this.PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRowChanging(this, new PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRowChangeEvent(((PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRowDeleted != null)) {
                    this.PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRowDeleted(this, new PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRowChangeEvent(((PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRowDeleting != null)) {
                    this.PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRowDeleting(this, new PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRowChangeEvent(((PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow(PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                LogonUserDataSet ds = new LogonUserDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow : global::System.Data.DataRow {
            
            private PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersDataTable tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers = ((PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int USL_ID {
                get {
                    return ((int)(this[this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.USL_IDColumn]));
                }
                set {
                    this[this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.USL_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int USL_FETCHED_LOGON_ID {
                get {
                    return ((int)(this[this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.USL_FETCHED_LOGON_IDColumn]));
                }
                set {
                    this[this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.USL_FETCHED_LOGON_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int USR_ID {
                get {
                    try {
                        return ((int)(this[this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.USR_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USR_ID\' in table \'PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWS" +
                                "GetUsers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.USR_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int USR_SEX_CODE {
                get {
                    try {
                        return ((int)(this[this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.USR_SEX_CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USR_SEX_CODE\' in table \'PT_USER_LOGONSetFlagUSL_HAS_BREAKIN" +
                                "G_NEWSGetUsers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.USR_SEX_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal USR_LAT {
                get {
                    try {
                        return ((decimal)(this[this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.USR_LATColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USR_LAT\' in table \'PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEW" +
                                "SGetUsers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.USR_LATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal USR_LNG {
                get {
                    try {
                        return ((decimal)(this[this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.USR_LNGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USR_LNG\' in table \'PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEW" +
                                "SGetUsers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.USR_LNGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int USR_RADIUS_KM {
                get {
                    try {
                        return ((int)(this[this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.USR_RADIUS_KMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USR_RADIUS_KM\' in table \'PT_USER_LOGONSetFlagUSL_HAS_BREAKI" +
                                "NG_NEWSGetUsers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.USR_RADIUS_KMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSR_IDNull() {
                return this.IsNull(this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.USR_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSR_IDNull() {
                this[this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.USR_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSR_SEX_CODENull() {
                return this.IsNull(this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.USR_SEX_CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSR_SEX_CODENull() {
                this[this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.USR_SEX_CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSR_LATNull() {
                return this.IsNull(this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.USR_LATColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSR_LATNull() {
                this[this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.USR_LATColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSR_LNGNull() {
                return this.IsNull(this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.USR_LNGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSR_LNGNull() {
                this[this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.USR_LNGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSR_RADIUS_KMNull() {
                return this.IsNull(this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.USR_RADIUS_KMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSR_RADIUS_KMNull() {
                this[this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsers.USR_RADIUS_KMColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow : global::System.Data.DataRow {
            
            private PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsDataTable tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNews;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNews = ((PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Counter {
                get {
                    try {
                        return ((int)(this[this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNews.CounterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Counter\' in table \'PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEW" +
                                "SCheckBreakingNews\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNews.CounterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCounterNull() {
                return this.IsNull(this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNews.CounterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCounterNull() {
                this[this.tablePT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNews.CounterColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRowChangeEvent : global::System.EventArgs {
            
            private PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRowChangeEvent(PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSGetUsersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRowChangeEvent : global::System.EventArgs {
            
            private PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRowChangeEvent(PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PT_USER_LOGONSetFlagUSL_HAS_BREAKING_NEWSCheckBreakingNewsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591