//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by the Database Schema tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
//
//     Exception should be handled in a higher layer.
//
//     generation time: 20/12/2011 16:10
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using Microsoft.Practices.EnterpriseLibrary.Data;

namespace MADA.DatePercent.SMTP.DBS.dbSmtpDB.SPs
{
public class procsp_dropdiagram
{
public const string _Name = "sp_dropdiagram";
public const string _Caption = "sp_dropdiagram";

public static SqlCommand SqlCommand()
{
System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand();
cmd.CommandType = CommandType.StoredProcedure;
cmd.CommandText = "sp_dropdiagram";
SqlParameterCollection(cmd.Parameters);
return cmd;
}
public static SqlCommand SqlCommand(
string p_strdiagramname, System.Nullable<int> p_iowner_id)
{
System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand();
cmd.CommandType = CommandType.StoredProcedure;
cmd.CommandText = "sp_dropdiagram";
SqlParameterCollection(cmd.Parameters, p_strdiagramname, p_iowner_id);
return cmd;
}
public static void SqlParameterCollection(
System.Data.SqlClient.SqlParameterCollection p_oSqlParameterCollection)
{
p_oSqlParameterCollection.Clear();
p_oSqlParameterCollection.Add(pardiagramname._SqlParameter());
p_oSqlParameterCollection.Add(parowner_id._SqlParameter());
}
public static void SqlParameterCollection(
System.Data.SqlClient.SqlParameterCollection p_oSqlParameterCollection
, string p_strdiagramname, System.Nullable<int> p_iowner_id)
{
p_oSqlParameterCollection.Clear();
p_oSqlParameterCollection.Add(pardiagramname._SqlParameter(p_strdiagramname));
p_oSqlParameterCollection.Add(parowner_id._SqlParameter(p_iowner_id));
}
public class pardiagramname
{
public const string _Name = "@diagramname";
public const string _Caption = "@diagramname";
public const string _ParentName = "sp_dropdiagram";
public const SqlDbType _SqlDbType = SqlDbType.NVarChar;
public const Int32 _Length = 128;
public const bool _IsNullable = true;
public const string _BindDataAdapter = "sp_dropdiagram.DefaultView.[0].@diagramname";
public const string _BindDataReader = "[@diagramname]";
public const ParameterDirection _ParameterDirection = ParameterDirection.Input;
public static SqlParameter _SqlParameter()
{
return DBS.Tools.CreateSqlParameterReferenceType("@diagramname", 128, -1, 128, SqlDbType.NVarChar, "string", ParameterDirection.Input, true, false, "");
}
public static SqlParameter _SqlParameter(string Value)
{
return DBS.Tools.CreateSqlParameterReferenceType("@diagramname", 128, -1, 128, SqlDbType.NVarChar, "string", ParameterDirection.Input, true, false, "", Value);
}
}
public class parowner_id
{
public const string _Name = "@owner_id";
public const string _Caption = "@owner_id";
public const string _ParentName = "sp_dropdiagram";
public const SqlDbType _SqlDbType = SqlDbType.Int;
public const Int32 _Length = 4;
public const bool _IsNullable = true;
public const string _BindDataAdapter = "sp_dropdiagram.DefaultView.[0].@owner_id";
public const string _BindDataReader = "[@owner_id]";
public const ParameterDirection _ParameterDirection = ParameterDirection.Input;
public static SqlParameter _SqlParameter()
{
return DBS.Tools.CreateSqlParameterReferenceType("@owner_id", 10, 0, 4, SqlDbType.Int, "int", ParameterDirection.Input, true, false, "");
}
public static SqlParameter _SqlParameter(System.Nullable<int> Value)
{
return DBS.Tools.CreateSqlParameterReferenceType("@owner_id", 10, 0, 4, SqlDbType.Int, "int", ParameterDirection.Input, true, false, "", Value);
}
}
public class indiagramname : pardiagramname {}
public class inowner_id : parowner_id {}
public static int ExecuteNonQuery(
string p_strdiagramname, System.Nullable<int> p_iowner_id)
{
try
{
Microsoft.Practices.EnterpriseLibrary.Data.Database db = DatabaseFactory.CreateDatabase();
SqlCommand cmd = SqlCommand(p_strdiagramname, p_iowner_id);
int iResult = db.ExecuteNonQuery(cmd);

return iResult;
}
catch (System.Exception ex)
{
MADA.DatePercent.SMTP.DBS.Tools.WriteToLog(ex, System.Reflection.MethodBase.GetCurrentMethod());
throw;
}
}
public static int ExecuteNonQuery(
string p_strdiagramname, System.Nullable<int> p_iowner_id,Microsoft.Practices.EnterpriseLibrary.Data.Database p_db,System.Data.Common.DbTransaction p_trn)
{
try
{
SqlCommand cmd = SqlCommand(p_strdiagramname, p_iowner_id);
int iResult = p_db.ExecuteNonQuery(cmd, p_trn);

return iResult;
}
catch (System.Exception ex)
{
MADA.DatePercent.SMTP.DBS.Tools.WriteToLog(ex, System.Reflection.MethodBase.GetCurrentMethod());
throw;
}
}
}
}
